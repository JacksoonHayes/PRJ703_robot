/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 10.06.2025 09:33:04

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242592;
#else
constexpr int kTensorArenaSize = 241568;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[3] = { 19078, -37320, -30908, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.00029877264751121402, 0.00016894491272978485, 0.00019125179096590728, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 75,22,101,-16,-1,41,13,-5,-37,10,3,10,10,-60,-7,-27,-39,127,88,74,-54,-40,-3,-44,-91,64,-57,82,115,62,-11,91, 
  /* [1][0][][] */ 52,-37,-75,19,-16,127,-60,-7,127,-62,-5,-111,-73,94,34,-55,93,-48,-5,-99,-115,26,120,77,26,27,3,-45,-97,-73,-7,-48, 
  /* [2][0][][] */ -31,69,-70,83,68,-49,-54,102,88,34,117,-39,-90,-81,86,110,-77,-47,-6,-99,64,112,-54,-82,84,-66,-15,-127,-17,-86,73,-51, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0056935246102511883, 0.0032194780651479959, 0.0036445665173232555, } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&g0::quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { 305, -11, 129, -121, 66, 397, 1202, -226, -105, 157, -88, 2470, -164, -497, -2, -152, -258, 286, 1462, -243, -596, -171, -217, -532, -419, 527, -439, 1762, 2535, 715, -540, 1729, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.5384145778371021e-05, 4.174316200078465e-05, 5.1260947657283396e-05, 4.9011126975528896e-05, 6.093975025578402e-05, 4.1696606785990298e-05, 8.0957870522979647e-05, 4.6852521336404607e-05, 4.5349137508310378e-05, 4.8245507059618831e-05, 4.4436063035391271e-05, 6.2049992266111076e-05, 4.4459178752731532e-05, 4.6263197873486206e-05, 4.7738540160935372e-05, 4.8141839215531945e-05, 4.4847765821032226e-05, 4.4757347495760769e-05, 5.8504931075731292e-05, 4.3812437070300803e-05, 4.2911462514894083e-05, 4.4762313336832449e-05, 5.1057129894616082e-05, 4.5919554395368323e-05, 5.562134538195096e-05, 5.1662114856299013e-05, 5.8485551562625915e-05, 5.2561070333467796e-05, 7.8396980825345963e-05, 4.8462166887475178e-05, 4.4154188799438998e-05, 7.1212220063898712e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -45,-55,103,17,79,-19,-100,-99,66,-108,-104,-17,49,16,-32,51,-58,-36,-52,-48,-65,-92,3,92,-94,-5,77,-49,101,-3,-35,-85,69,-81,-92,66,-97,-70,-81,27,42,-76,-85,99,48,-114,101,-11,-1,-63,-23,106,-73,-58,-86,95,23,60,111,-127,-66,78,-55,30,-3,1,69,79,54,91,88,-113,89,-89,40,79,-93,17,-58,40,57,25,90,-11,-53,-45,-82,96,21,120,-2,-122,1,68,32,41, 
  /* [1][0][][] */ -65,40,-105,-14,-32,61,50,-12,47,-113,-107,114,55,-39,16,68,90,-33,6,123,-60,-15,46,29,30,20,-60,110,8,-5,99,-76,62,103,-12,22,48,60,-26,-101,-58,16,-46,-102,-24,35,-57,-79,-26,-87,106,81,17,91,-78,-53,28,107,73,95,-84,99,-64,-71,-68,28,69,43,79,-36,9,11,-114,86,-50,53,78,-61,-40,53,-93,87,-51,-112,28,127,-70,-94,84,78,74,21,91,75,23,-16, 
  /* [2][0][][] */ 49,16,-23,90,-22,-14,64,69,-91,69,-30,94,80,8,74,-92,-34,-39,36,38,-80,-11,84,16,-26,63,87,-6,-58,68,72,87,-63,-10,-81,-89,-88,76,87,-27,-111,-72,15,-10,-51,127,-14,-74,69,32,75,-78,-43,44,26,28,-65,73,-58,2,-15,65,-41,52,77,54,40,75,-66,65,14,-63,20,-70,21,29,-47,-39,-8,2,37,-80,-16,-30,-10,-88,-10,-34,65,91,3,11,-47,-48,-43,-53, 
  /* [3][0][][] */ 51,8,3,-34,-63,28,-110,38,44,14,56,-15,87,85,76,-4,82,101,-50,30,113,-60,-43,-100,-19,-104,-63,101,37,-89,48,-2,-43,-35,-1,-21,-66,-25,34,48,-43,-82,-104,8,75,19,-44,-64,75,-81,39,-10,82,40,54,-89,-115,-96,-97,-67,-81,20,-25,62,58,-35,-49,-39,-31,-83,10,96,18,-91,49,-59,33,105,103,-40,-86,-127,44,58,26,55,-38,-96,-67,53,-6,-118,60,-93,-68,7, 
  /* [4][0][][] */ 31,80,-17,28,-9,-29,37,16,32,63,4,54,22,-31,-8,-52,-38,7,-52,20,78,-63,72,15,-15,4,40,-34,-35,28,-59,-43,59,78,18,-64,-17,1,-70,24,-22,-40,-86,-49,32,68,17,41,20,-29,-24,-30,-47,38,-69,10,36,-51,33,15,9,-50,-20,-30,-37,36,1,-28,8,-127,-65,-45,-28,18,84,40,42,-19,9,-37,4,-38,-60,-10,3,51,71,-3,-69,-42,18,30,32,59,-55,-17, 
  /* [5][0][][] */ 74,-78,68,80,47,-124,15,68,127,-126,9,-91,33,99,40,44,74,76,-53,114,41,62,27,-23,-77,-65,-4,-81,65,41,6,-99,-32,-16,-61,28,-102,-18,58,40,-120,-72,43,107,-53,6,47,-31,-107,91,37,20,47,18,18,-37,120,63,-47,-68,46,-65,54,-84,-21,101,-16,15,87,13,121,-66,-40,102,-18,-73,17,-26,22,102,117,31,39,80,-67,90,0,48,81,-101,124,76,-31,12,83,-72, 
  /* [6][0][][] */ 48,-25,127,80,-40,7,-2,38,25,-38,19,-48,68,73,79,-36,32,-12,-7,56,-23,-33,60,37,-23,-40,5,-20,0,-35,51,-23,-33,-41,-13,-29,-10,24,-37,55,47,36,32,14,-37,96,-38,-27,-29,33,9,-43,43,-30,61,11,16,-3,-32,62,-32,41,31,-33,-11,82,62,7,69,15,-38,12,47,-47,-34,9,0,-66,-27,3,48,4,16,10,-38,-47,-3,-31,56,69,82,26,-15,12,49,18, 
  /* [7][0][][] */ 100,73,-81,-63,-63,79,-9,0,83,2,-89,20,46,-94,36,62,25,34,-13,114,43,33,6,74,-72,96,27,54,-76,94,-37,22,28,14,66,83,-82,82,-12,-46,94,-69,32,67,46,-19,81,-103,57,-54,-120,-46,-21,88,3,23,103,-72,13,-49,-7,-26,83,-96,-76,-64,59,16,-127,-38,57,80,88,29,61,49,-69,59,-79,34,67,-45,-2,-74,82,36,-99,75,82,4,53,46,-48,-63,-6,-77, 
  /* [8][0][][] */ -5,44,-77,-100,61,0,-63,-8,15,32,46,96,5,-60,-79,-69,-65,111,-49,28,33,-17,88,108,-105,90,52,79,-62,20,-96,103,93,-46,52,-9,127,13,-14,76,80,101,-118,-106,-23,-49,-25,118,34,-92,-61,14,-56,-2,-39,-115,45,115,-80,101,113,29,54,108,-28,-60,-14,83,-87,40,38,2,81,84,16,14,-45,123,90,77,29,68,-90,-94,34,46,72,-34,41,-36,-101,85,-76,-120,-40,50, 
  /* [9][0][][] */ 7,-13,116,51,81,-103,-37,-90,39,47,1,64,-16,-75,-83,-18,5,-13,-111,-65,8,87,-94,-77,82,-7,-10,23,-6,-54,-76,88,59,-1,30,-15,-73,13,-38,-28,43,-61,67,-79,87,27,-105,37,31,-4,-82,-38,78,-79,-63,99,74,-36,-12,8,-70,101,57,-60,-78,3,103,51,-33,103,92,-73,8,67,-86,-83,-67,-127,-29,89,45,25,80,16,-40,-100,29,-9,88,17,-42,115,108,-3,49,-35, 
  /* [10][0][][] */ -71,92,52,-81,-7,76,117,31,12,27,27,-54,92,64,-40,10,-59,99,-107,-49,-24,30,67,-61,29,57,-122,-104,-48,74,-97,-91,90,88,121,65,-23,13,-35,15,-25,120,-127,-32,-95,-69,-18,-56,8,0,28,31,67,29,-66,-39,-97,-1,41,-33,-14,56,117,51,110,-88,-95,-26,-10,-79,-94,-62,95,76,-71,104,-22,75,77,16,67,-5,71,102,-92,71,100,-35,43,6,-32,-73,-48,-72,-45,-74, 
  /* [11][0][][] */ 127,25,120,123,111,43,60,23,86,80,-22,97,19,-4,36,17,-44,-93,25,29,40,61,21,-22,-58,-51,-7,80,72,29,83,-7,-28,-7,45,73,-50,50,1,-48,11,116,-1,81,62,80,-51,-80,57,111,111,51,-19,-41,68,51,-16,-40,-2,-23,-39,118,45,31,41,106,-31,101,79,62,-48,-18,41,55,-50,108,42,0,-27,75,-19,46,-58,85,38,-44,33,18,-26,66,44,-13,-22,12,-31,10, 
  /* [12][0][][] */ 18,67,-43,0,77,35,-46,24,-76,58,-22,2,-47,24,51,-77,-96,-42,-47,-90,27,-10,6,86,-66,-53,94,-105,81,7,-35,119,-94,-59,-54,12,-18,-87,-21,26,106,33,-112,-43,-11,-51,-22,104,-49,-118,-74,89,26,1,-79,83,-24,-72,47,57,40,114,-13,42,107,52,-51,111,63,95,40,65,72,91,-28,-11,-24,13,-127,-97,-61,100,42,12,-48,37,48,103,-101,-96,97,38,93,1,26,62, 
  /* [13][0][][] */ 92,-64,81,81,79,112,64,69,93,-103,5,-33,83,46,61,-59,-98,-66,-63,30,69,-34,103,-42,-58,24,16,25,-94,-83,68,37,38,82,-25,36,-63,-34,24,87,-69,59,-41,24,-57,-5,-23,-11,30,86,-40,-112,-102,14,85,-94,-44,26,-31,-82,-4,113,-76,-1,-58,-68,-93,68,-31,6,95,-8,-90,39,-75,-51,-86,80,77,-40,47,-94,72,5,-84,-114,79,127,-26,-62,-88,49,100,-55,64,-4, 
  /* [14][0][][] */ -58,-68,49,50,80,-56,-1,-94,-76,-37,68,81,-29,-94,-86,-76,-58,-32,4,31,-40,28,9,59,-91,-60,-27,40,-100,-100,-74,28,102,-31,-25,1,105,111,35,-103,7,-90,23,88,45,-127,47,-66,94,34,69,70,96,-4,-21,1,-40,20,58,94,-11,-84,-12,75,-81,-20,71,-98,-92,-107,-76,89,17,82,54,-64,49,-83,60,31,40,-22,-90,-33,-95,-74,-96,95,109,8,43,-55,80,63,-13,47, 
  /* [15][0][][] */ 14,-12,-58,55,94,-98,72,-84,29,-1,-58,30,91,-9,-84,-100,60,25,-103,28,35,19,77,107,62,68,21,89,20,46,58,-98,16,5,-51,-7,-54,105,93,-77,31,113,-59,-16,29,-78,-56,-88,0,-67,-13,52,-76,-79,-43,-4,65,61,-30,113,-56,-73,7,108,-38,79,-65,5,-81,-39,48,-60,29,-6,62,-92,-11,47,102,52,-80,53,-90,-47,-102,-28,-76,24,87,61,-127,-35,57,80,-98,92, 
  /* [16][0][][] */ -73,0,101,-57,28,119,-67,53,77,45,-104,56,-7,-49,-43,-59,118,75,93,70,116,82,-40,45,-16,44,-51,63,-97,18,37,19,-108,67,58,59,-22,60,-39,-43,9,-56,80,90,42,87,111,8,-52,-111,19,83,-52,107,54,31,23,85,58,-3,127,112,35,42,60,12,-22,80,58,127,-20,-12,26,107,60,70,-4,112,-101,4,16,-82,57,-5,14,93,91,29,69,17,-4,101,60,-28,-71,33, 
  /* [17][0][][] */ 48,-122,111,95,-42,-104,-61,-112,34,-81,81,58,107,77,-107,46,19,32,80,106,-90,-6,8,-41,17,70,-87,22,111,-47,-24,71,-18,-16,37,20,-62,99,-89,-36,-102,-47,-2,-16,12,13,83,-127,55,109,-14,21,-14,56,94,-47,-114,83,-92,-112,33,-68,58,100,-86,-75,45,-90,-96,3,104,29,17,-123,-59,75,107,-70,33,-55,27,-6,-86,-70,-105,55,77,-35,20,69,-79,-106,-11,104,6,30, 
  /* [18][0][][] */ -35,69,125,-11,3,-52,-57,-5,-31,78,-58,-38,-23,72,54,-25,-3,-28,103,-26,64,-8,0,-69,30,-40,-25,74,31,24,55,73,45,-1,-91,-29,-40,53,-21,30,-11,6,-68,-5,-67,28,56,-15,4,46,78,49,-87,-2,127,84,6,13,-23,-52,54,106,6,30,-40,-76,-3,105,63,-99,-56,80,-70,-23,-57,-40,47,12,-23,-57,-22,88,-25,-34,97,-32,43,43,-72,-45,-12,76,67,-15,38,73, 
  /* [19][0][][] */ 19,21,86,44,49,-66,85,82,91,-62,22,-21,-97,38,-56,56,54,-119,108,52,-21,82,-59,6,71,-80,22,-77,-92,-124,-65,34,73,-83,28,-5,-2,-66,-57,-127,32,-117,-75,0,-83,29,79,-91,-31,35,-37,30,-39,2,5,-9,16,80,-7,-37,42,-61,92,55,-68,-8,-30,-6,-11,59,75,-53,-65,-112,-61,-82,-25,-119,9,108,57,-113,-28,79,-82,-11,5,-6,85,28,1,57,-35,125,67,-47, 
  /* [20][0][][] */ -6,77,43,71,-65,76,57,52,-9,22,-91,41,-15,71,30,-78,-73,-33,-78,-40,9,-52,-78,-60,55,-57,-120,49,12,4,-43,103,118,55,-22,55,34,-38,-26,-127,-44,-5,-127,-102,-22,-71,-81,86,67,-110,-117,81,53,125,44,1,104,72,99,114,95,-66,-73,-1,-42,-64,-55,25,-107,-126,-88,76,-60,-93,30,22,101,62,101,88,68,5,74,-10,62,113,-21,63,25,92,1,70,37,20,-16,-12, 
  /* [21][0][][] */ 63,85,22,-116,103,-99,84,30,-13,-70,-65,60,4,11,-46,-90,-114,-3,25,-1,100,-40,79,-71,51,-79,-31,77,11,-1,-16,-30,19,6,-82,-114,125,102,-111,-34,5,14,7,-8,-97,-99,-92,95,-6,-75,-12,105,40,75,-98,6,-45,68,-38,127,48,-94,22,-3,75,12,-30,-74,-125,-40,58,76,44,-2,78,60,-116,-7,71,98,3,89,50,-72,31,-89,64,-82,-94,72,71,-118,-39,-118,63,-44, 
  /* [22][0][][] */ 15,-44,-68,-89,71,-44,66,49,-67,57,-58,-102,97,-111,-103,-83,36,72,-89,-53,77,-79,24,26,79,-26,-93,90,-61,-64,-62,-71,41,37,11,15,9,-29,-48,-87,-32,-39,2,86,35,-107,66,-16,-53,-85,12,-29,-59,-83,-49,1,-10,-22,-18,-35,100,-63,-67,-121,-54,18,-114,-54,101,90,-18,-2,-59,-13,51,-85,43,-41,55,80,92,-82,-84,-127,64,61,83,-31,-56,15,-76,52,8,15,-18,86, 
  /* [23][0][][] */ 46,-99,4,53,81,-109,-21,-68,81,-81,82,75,25,-117,23,-49,102,-38,-83,91,89,-65,84,-26,-21,-29,87,17,68,44,60,-31,-33,14,18,48,98,8,-103,32,-121,-28,20,-104,-94,-107,110,41,66,-118,-82,-86,64,-82,-71,67,-70,-11,77,35,-90,-78,-60,-36,28,22,-91,-118,73,19,106,-75,-8,-8,-36,-110,37,-11,81,118,-46,-58,12,-127,97,-23,95,-3,-99,12,74,1,105,-65,-33,82, 
  /* [24][0][][] */ -77,-22,-127,-75,-49,-110,-26,-49,58,93,69,72,92,26,-26,-97,-75,58,15,-29,74,-56,-31,-5,30,-15,54,57,77,39,-22,-57,21,-1,47,24,-20,-54,50,-8,-28,-61,57,14,9,-48,16,59,-51,-49,-29,49,65,58,31,-71,6,84,30,24,70,-16,36,91,-87,62,-31,-74,-99,28,-47,-14,-15,51,87,69,41,-40,-69,-66,-73,-92,-42,-105,10,47,-10,-70,34,-83,-26,-57,-2,0,-71,3, 
  /* [25][0][][] */ -67,-57,-33,14,67,-32,-102,49,54,-103,-37,-20,70,3,-102,3,-33,46,57,-82,64,76,-13,-54,24,-56,-61,38,76,-46,33,106,67,-101,44,71,92,-48,4,7,-113,66,-82,12,82,45,68,57,-80,83,-52,-28,32,-30,-53,10,-43,47,-99,38,127,63,55,28,10,75,-6,3,-34,34,-7,-95,35,-92,65,35,70,76,21,41,58,49,-35,66,-58,-47,-85,-63,-33,-41,113,14,-89,1,-28,-40, 
  /* [26][0][][] */ 36,-98,-18,-11,-81,-7,-18,7,-38,-96,73,55,-43,-43,44,-20,111,18,-59,-50,28,70,69,10,28,35,27,29,1,0,-76,-5,-28,-53,-72,-84,-46,56,-41,127,-81,65,52,26,-60,47,-45,75,-35,16,-12,64,0,-46,-8,-84,63,50,28,11,22,-63,43,-27,76,-18,-35,35,-43,97,72,67,47,-72,-71,-4,30,-71,-69,15,-23,48,46,-66,51,-9,-39,28,-72,75,-1,19,-45,76,39,58, 
  /* [27][0][][] */ 15,32,27,-24,-82,-8,-42,-23,33,81,56,-98,-25,60,66,40,43,-26,56,-70,-75,2,-36,-28,-24,45,-100,16,61,36,17,15,53,71,-82,-43,-64,-31,-49,47,-56,63,72,51,123,85,56,92,99,63,115,61,-48,-59,13,-34,108,-36,-49,-55,11,-19,19,52,60,-5,-81,127,67,59,-97,19,53,-51,7,-15,106,-78,56,99,121,-2,94,17,-46,-52,-18,73,-17,76,17,-38,49,45,79,116, 
  /* [28][0][][] */ 87,-11,127,75,-57,-10,-65,-54,-17,-45,48,37,-42,2,9,82,47,50,-26,45,31,14,-51,-45,-28,57,-34,-41,-19,-25,67,4,-73,36,47,72,-1,-52,-3,2,26,26,-8,44,31,94,14,22,9,82,8,-51,-19,8,119,49,46,-14,70,28,19,12,-52,17,65,68,-6,83,-30,27,-45,-1,36,18,1,6,-26,-52,-46,28,-4,91,75,77,30,-21,55,-21,-48,36,17,-29,58,106,-28,19, 
  /* [29][0][][] */ 86,31,116,4,-73,41,-110,-12,90,12,-77,-81,100,-51,-12,-36,-85,60,37,-70,-58,-15,34,6,-18,23,-42,-38,-70,-12,125,20,49,27,-74,-15,-36,95,-11,60,34,101,-18,62,27,125,-28,-38,-16,31,75,-97,63,-100,127,69,-71,25,-51,102,-118,107,-102,-47,-40,-29,59,104,112,-58,34,-60,87,50,44,41,113,-94,-49,21,19,-33,-13,-53,61,102,36,58,-34,100,101,93,-65,49,7,99, 
  /* [30][0][][] */ 11,-63,-71,19,-101,14,-66,-13,105,-29,-1,-46,-111,2,44,10,-16,33,77,-110,29,-109,-111,4,-109,11,-75,112,-22,-105,-97,-8,-93,-82,-127,-64,15,-27,-4,23,87,-79,-17,96,87,-54,87,56,-69,56,14,-101,90,-51,-23,85,-81,-59,-80,-56,-102,-12,-72,-32,-112,-91,-101,75,-71,93,33,-40,-95,96,38,-86,-63,-70,-74,-64,19,8,-105,-21,-110,22,-107,103,-36,-113,61,43,-47,-13,5,-83, 
  /* [31][0][][] */ 94,-62,109,127,50,83,-20,-67,-30,13,-21,-51,71,-23,-16,97,-31,-70,40,26,39,51,-26,63,45,-36,24,23,-14,-30,102,108,19,42,-56,41,48,5,-16,-87,55,-25,5,20,15,3,-10,20,20,62,86,-1,-55,-41,31,36,-38,34,11,86,-23,28,49,-30,65,97,-9,0,74,-75,-60,15,-56,-20,13,53,-12,-54,16,62,-5,46,44,95,63,55,-40,2,21,-20,-13,-13,23,99,5,49, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.001928826211951673, 0.0017740842886269093, 0.0021785902790725231, 0.0020829727873206139, 0.0025899393949657679, 0.0017721056938171387, 0.0034407095517963171, 0.0019912321586161852, 0.001927338307723403, 0.0020504340063780546, 0.0018885326571762562, 0.0026371246203780174, 0.0018895150860771537, 0.0019661858677864075, 0.0020288878586143255, 0.0020460281521081924, 0.0019060299964621663, 0.001902187243103981, 0.0024864594452083111, 0.0018620284972712398, 0.0018237370532006025, 0.0019023983040824533, 0.0021699280478060246, 0.0019515809835866094, 0.0023639071732759476, 0.002195639768615365, 0.0024856359232217073, 0.0022338454145938158, 0.0033318717032670975, 0.0020596419926732779, 0.0018765529384836555, 0.0030265192035585642, } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&g0::quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { 1486, -73, 3713, 3415, 3343, -1286, 2321, -1155, -1631, -494, 4163, -1657, 3048, 5224, 1725, 1585, -393, -340, -1400, 4560, 1627, -373, 1769, -388, -952, 3131, 1069, 1300, 5075, 1431, 3974, 811, 930, 3571, 4625, 2407, -656, 2029, 2307, -3111, -364, 1232, 140, 1563, -578, 887, -1298, 384, -5722, 1828, 1293, -3511, 5156, -704, 1908, 1103, 931, 1664, -851, -1845, 158, 1017, 249, 2964, 4795, 1933, 2672, 4185, 3338, -533, 2173, 4864, 2929, -938, 3506, 6462, 695, -2936, 391, 1008, 7724, 1605, -370, -2364, 826, 356, 1242, -1930, 2387, -332, 3687, 630, -21, -1684, -206, 1466, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00016200468235183507, 0.00038005318492650986, 0.00020370769198052585, 0.00023731664987280965, 0.00018209574045613408, 0.00026813449221663177, 0.00023635057732462883, 0.00023651205992791802, 0.00025082638603635132, 0.00024386470613535494, 0.00015118219016585499, 0.00027209732797928154, 0.0001833242567954585, 0.00011463694681879133, 0.00018406615708954632, 0.00028435239801183343, 0.00028704237774945796, 0.00025655730860307813, 0.00018890494538936764, 0.00013461821072269231, 0.00025052283308468759, 0.00018962068133987486, 0.00019303832959849387, 0.00024308283173013479, 0.00031173284514807165, 0.00019490197882987559, 0.00023710170353297144, 0.00025642957189120352, 0.00013944011880084872, 0.00027493809466250241, 0.00014256361464504153, 0.00030558457365259528, 0.00030374177731573582, 0.00017683955957181752, 0.00013514053716789931, 0.00019839018932543695, 0.00018204361549578607, 0.00022793376410845667, 0.00014664768241345882, 0.00018391791672911495, 0.00017710583051666617, 0.00019433503621257842, 0.00022558972705155611, 0.00019108614651486278, 0.00020462708198465407, 0.0001842341007431969, 0.00018361816182732582, 0.00025383764295838773, 0.00012822759163100272, 0.00016954218153841794, 0.00029740313766524196, 0.00013998788199387491, 0.00013695693633053452, 0.00026866747066378593, 0.00020937390218023211, 0.00025602281675674021, 0.00019637939112726599, 0.00023262685863301158, 0.000240633002249524, 0.00015971976972650737, 0.000213497260119766, 0.00029311896651051939, 0.0002987589396070689, 0.00021125137573108077, 0.00015095573326107115, 0.00028444980853237212, 0.00016396353021264076, 0.00018112870748154819, 0.00021891381766181439, 0.00023163613514043391, 0.00020707224030047655, 0.00013635015056934208, 0.00016667720046825707, 0.00025989508139900863, 0.0001984851696761325, 0.00012339984823483974, 0.0001669077028054744, 0.00019896407320629805, 0.00022861215984448791, 0.00019385691848583519, 0.00011299723701085895, 0.00017704293713904917, 0.00019832520047202706, 0.00017408770509064198, 0.0002383430692134425, 0.00024517849669791758, 0.00021319540974218398, 0.00021358835510909557, 0.00026086962316185236, 0.00024678776389919221, 0.00017868302529677749, 0.00032705091871321201, 0.0002412133471807465, 0.00020610592036973685, 0.0002399116347078234, 0.00019637033983599395, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -11,110,-76,26,47,-36,99,75,-61,0,22,-94,71,127,-61,13, 
  /* [1][0][][] */ -26,-2,-62,-35,-14,45,28,-127,31,-47,-35,-70,6,-37,-40,-6, 
  /* [2][0][][] */ -34,-46,48,90,20,42,-125,127,-16,-6,49,-60,-3,-96,-45,65, 
  /* [3][0][][] */ 82,-78,76,4,0,-31,-35,127,-13,42,58,40,-6,54,3,-4, 
  /* [4][0][][] */ -45,-36,1,31,-91,5,-19,-127,-17,-2,20,7,13,37,94,111, 
  /* [5][0][][] */ 107,14,-23,-21,-75,17,25,59,22,-5,52,72,127,19,-73,-2, 
  /* [6][0][][] */ -9,-57,-47,-69,-62,-12,11,-62,-57,-61,-45,24,79,43,127,-16, 
  /* [7][0][][] */ -59,39,-23,-68,6,-64,-66,22,-83,68,-51,-52,-127,-39,7,99, 
  /* [8][0][][] */ 48,36,73,5,52,21,74,3,66,-21,40,11,-127,-31,-77,10, 
  /* [9][0][][] */ -43,59,31,-51,-36,-17,30,-13,-37,38,-44,3,37,127,27,30, 
  /* [10][0][][] */ 58,35,-34,44,-25,-18,52,-56,-80,-21,-50,-81,-127,-73,2,86, 
  /* [11][0][][] */ 56,-8,59,8,-7,-17,-8,108,-115,7,-51,0,-16,-7,86,127, 
  /* [12][0][][] */ -57,-33,10,-8,14,4,127,31,-74,11,-5,-14,-15,81,-32,91, 
  /* [13][0][][] */ 9,25,33,53,98,34,127,111,-33,105,-89,-64,35,81,-114,-45, 
  /* [14][0][][] */ -101,127,2,1,6,16,52,14,-42,24,119,-5,-90,36,-40,56, 
  /* [15][0][][] */ -10,-7,-127,-32,89,-42,-93,-27,-15,-19,-6,-54,0,-78,-71,47, 
  /* [16][0][][] */ 96,-32,25,-25,15,-39,48,-30,-56,13,127,54,41,-6,-48,19, 
  /* [17][0][][] */ 1,4,-16,-90,-13,-57,115,-127,-6,-7,-55,39,27,63,10,32, 
  /* [18][0][][] */ 36,127,-18,-37,43,-60,-24,-42,-28,124,-26,-23,-25,60,-9,-12, 
  /* [19][0][][] */ -70,-124,127,-80,37,-121,37,-50,28,43,76,122,7,-17,65,-31, 
  /* [20][0][][] */ -24,82,58,-5,4,-2,30,-35,64,5,93,-14,-127,-33,-76,-7, 
  /* [21][0][][] */ -71,43,27,22,77,24,72,57,-127,60,-44,20,-26,10,-74,-28, 
  /* [22][0][][] */ 7,-103,48,7,11,-127,121,-9,5,-44,-42,-52,28,-87,-45,-44, 
  /* [23][0][][] */ -59,-108,48,57,21,-24,33,-62,19,-45,64,-2,8,64,83,127, 
  /* [24][0][][] */ 3,-5,17,96,48,21,-63,-127,76,8,-37,21,7,4,-22,-33, 
  /* [25][0][][] */ -24,23,27,-61,-28,-21,15,-48,-43,48,-53,-6,36,127,28,0, 
  /* [26][0][][] */ -56,70,6,20,31,-78,-2,-32,0,28,15,83,-5,1,-72,127, 
  /* [27][0][][] */ -28,-127,-39,-5,-63,79,8,-63,5,-36,47,-31,21,-48,-83,-20, 
  /* [28][0][][] */ -36,0,34,83,29,18,-45,-123,-127,41,110,-21,77,15,-41,-27, 
  /* [29][0][][] */ -127,92,-19,-44,-32,21,-112,-82,-54,-39,-14,-12,13,-56,-94,49, 
  /* [30][0][][] */ 64,82,-36,81,-99,-101,-70,-3,-21,-1,6,-100,127,17,-17,113, 
  /* [31][0][][] */ 127,43,-68,-31,-69,24,104,52,-46,-7,76,35,55,31,-28,12, 
  /* [32][0][][] */ -35,-42,127,-11,-34,73,75,4,-29,-26,-22,19,12,68,81,37, 
  /* [33][0][][] */ -13,0,-63,-66,-35,25,127,9,-19,-27,16,-64,93,112,-39,44, 
  /* [34][0][][] */ -105,-42,86,3,18,-59,105,-21,-127,21,25,-35,39,45,-40,-44, 
  /* [35][0][][] */ -17,2,-47,6,-76,127,-35,-27,-30,108,-7,85,-67,68,32,16, 
  /* [36][0][][] */ -15,-98,127,-65,-61,13,-37,-32,4,32,-63,89,0,-88,-35,54, 
  /* [37][0][][] */ 94,-24,76,-36,115,-84,-54,21,-87,114,-82,-3,-95,-45,127,-22, 
  /* [38][0][][] */ 61,67,21,-127,5,-62,-121,74,-93,52,-116,-77,-61,-126,-113,58, 
  /* [39][0][][] */ -86,27,-60,-25,-73,-89,82,24,-127,-19,41,109,21,-2,-17,60, 
  /* [40][0][][] */ 127,31,13,-122,-85,14,22,-66,-46,-46,-73,-116,22,46,53,38, 
  /* [41][0][][] */ 88,-92,-62,-53,-7,-11,-61,-34,58,-39,-1,-56,127,-78,65,-41, 
  /* [42][0][][] */ -32,-120,-33,127,-6,-119,-104,14,-15,21,18,78,-108,68,-80,9, 
  /* [43][0][][] */ -90,-40,-47,-106,-46,7,-8,82,47,-127,-31,50,-29,-53,-38,100, 
  /* [44][0][][] */ -35,33,36,-44,-23,-15,11,118,99,-124,53,127,108,43,-14,-17, 
  /* [45][0][][] */ 37,74,-81,100,124,-77,-41,-61,127,-95,56,-77,-35,1,-73,85, 
  /* [46][0][][] */ -8,-42,11,-11,93,-22,26,7,-16,127,-35,-109,31,56,-42,75, 
  /* [47][0][][] */ 73,-50,-30,-20,67,-11,-33,-62,-9,127,-35,31,-17,-101,-71,18, 
  /* [48][0][][] */ 17,36,-28,-127,-1,-35,102,-94,22,-18,-42,31,57,65,22,34, 
  /* [49][0][][] */ -23,127,-51,32,41,-60,69,58,-27,18,21,-89,-31,54,108,-88, 
  /* [50][0][][] */ 26,50,-32,16,-127,13,-87,-57,59,68,14,19,-28,-32,13,32, 
  /* [51][0][][] */ 127,-66,-47,-18,-66,86,-89,-66,21,-20,-63,64,-28,-81,20,49, 
  /* [52][0][][] */ -47,-80,40,67,-57,-102,-127,-35,-74,-56,-40,-92,27,-58,31,77, 
  /* [53][0][][] */ 8,67,51,-127,-5,86,87,-33,-20,-22,-18,-33,67,-104,14,40, 
  /* [54][0][][] */ 29,127,9,-19,-9,-74,-100,65,20,-23,-51,122,79,82,19,73, 
  /* [55][0][][] */ -25,-5,52,42,54,-35,104,103,-76,-10,21,6,127,54,-15,20, 
  /* [56][0][][] */ 127,3,15,12,-62,111,-62,-98,-42,38,-100,1,-63,99,0,36, 
  /* [57][0][][] */ -45,-51,-41,-41,-62,-83,59,-36,-127,-29,34,59,19,26,11,37, 
  /* [58][0][][] */ 51,-45,52,18,6,-58,-21,11,26,-19,-127,-34,29,-27,-31,36, 
  /* [59][0][][] */ 70,2,-127,85,8,34,74,-36,-82,-52,24,-95,-102,-57,35,103, 
  /* [60][0][][] */ -5,18,-6,7,-20,-27,-14,-7,-38,-65,47,123,-46,-127,-37,-2, 
  /* [61][0][][] */ -21,38,76,-62,-37,51,-15,127,1,-79,68,68,81,4,1,102, 
  /* [62][0][][] */ 57,30,-6,-127,-17,-9,17,-47,-10,34,-38,44,16,-26,-74,-67, 
  /* [63][0][][] */ -19,-44,5,-18,-58,-77,-50,-3,-78,-12,-47,-16,127,-1,64,-25, 
  /* [64][0][][] */ 48,29,-21,68,-84,-10,-39,-62,63,127,28,-26,47,-28,-31,104, 
  /* [65][0][][] */ -18,8,-16,-18,-67,70,16,-27,45,-127,84,-54,60,55,-113,52, 
  /* [66][0][][] */ -127,116,-102,-85,50,-45,-124,-62,-115,93,111,-13,-110,-50,46,47, 
  /* [67][0][][] */ 8,-15,-127,-108,77,82,6,-14,-8,-3,59,-12,26,43,10,53, 
  /* [68][0][][] */ 69,13,-4,-35,-80,47,7,34,-76,63,123,-6,-17,-49,-127,15, 
  /* [69][0][][] */ 68,-127,71,-52,5,-109,-23,127,-29,63,79,103,-43,68,-32,4, 
  /* [70][0][][] */ 39,-5,117,36,94,-22,127,1,9,41,-46,60,-87,53,-70,49, 
  /* [71][0][][] */ 4,20,85,-77,-127,-73,17,-1,-21,-16,13,-103,-61,2,17,23, 
  /* [72][0][][] */ -70,-95,28,-118,70,-21,14,35,-66,15,-127,-25,59,111,-52,101, 
  /* [73][0][][] */ 26,6,53,-14,123,-92,-44,-9,-44,92,-106,47,-91,-61,127,-8, 
  /* [74][0][][] */ -105,-15,-117,-79,45,-43,-26,3,-93,6,-127,-42,-28,-58,-19,69, 
  /* [75][0][][] */ 87,-38,49,-49,12,0,-127,-33,-12,-105,64,-5,13,-21,2,-15, 
  /* [76][0][][] */ 21,-32,-47,115,48,98,71,-37,92,-127,65,88,48,-68,-50,27, 
  /* [77][0][][] */ -54,-53,126,-41,17,-34,-7,-127,9,19,14,75,36,34,27,3, 
  /* [78][0][][] */ -64,-21,14,-65,-13,-61,54,-38,13,-14,8,-75,-99,-83,-127,-51, 
  /* [79][0][][] */ -99,-82,-16,21,127,32,-15,9,21,34,-31,60,-51,-75,-74,-20, 
  /* [80][0][][] */ 0,-127,51,106,-35,-32,-93,61,-12,21,58,34,-88,-20,-27,65, 
  /* [81][0][][] */ 126,67,-28,93,-3,29,17,127,19,4,117,59,120,31,70,-29, 
  /* [82][0][][] */ -41,8,12,-26,37,-118,-127,-82,1,87,-47,-34,-33,109,-74,-13, 
  /* [83][0][][] */ 93,-2,91,-35,-21,-11,-110,8,33,-127,23,-39,-36,-16,-5,-27, 
  /* [84][0][][] */ 15,-37,-88,31,127,46,32,43,-93,36,-80,-25,36,-17,-65,3, 
  /* [85][0][][] */ -2,70,44,-43,85,-15,58,-125,127,-12,32,-6,74,-79,5,-12, 
  /* [86][0][][] */ 111,-39,127,47,-1,-55,80,36,-65,-45,-87,-37,26,14,-69,18, 
  /* [87][0][][] */ 6,12,15,-68,77,-15,-54,23,32,-43,78,-27,-99,-127,-1,27, 
  /* [88][0][][] */ -62,-44,33,-9,20,22,-64,-61,-13,7,-76,-127,-42,-43,-12,-17, 
  /* [89][0][][] */ -62,22,17,-60,27,10,-127,33,87,14,-64,-15,-13,-72,-41,-26, 
  /* [90][0][][] */ -7,-21,-29,-76,127,30,-64,34,40,51,20,-7,26,13,-70,-20, 
  /* [91][0][][] */ -46,-54,28,37,-39,-17,6,74,-15,-34,46,-23,-9,44,3,127, 
  /* [92][0][][] */ -21,77,1,-12,-24,64,-91,46,-40,0,59,1,-31,127,46,32, 
  /* [93][0][][] */ -19,63,-50,-65,60,83,-73,11,61,60,77,58,-127,25,-40,72, 
  /* [94][0][][] */ 49,85,95,22,-127,-27,-1,1,22,-26,33,-11,-74,-15,19,-25, 
  /* [95][0][][] */ 3,22,24,11,123,-7,-102,70,32,23,-107,69,15,5,127,-35, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.001611231011338532, 0.0037798504345118999, 0.002025991678237915, 0.0023602524306625128, 0.0018110482487827539, 0.0026667537167668343, 0.0023506442084908485, 0.0023522502742707729, 0.0024946145713329315, 0.002425376558676362, 0.0015035949181765318, 0.0027061663568019867, 0.0018232666188850999, 0.0011401312658563256, 0.0018306451383978128, 0.0028280504047870636, 0.0028548038098961115, 0.0025516119785606861, 0.0018787697190418839, 0.001338856527581811, 0.0024915956892073154, 0.0018858881667256355, 0.0019198786467313766, 0.0024176004808396101, 0.0031003647018224001, 0.0019384137121960521, 0.0023581145796924829, 0.0025503416545689106, 0.0013868132373318076, 0.0027344196569174528, 0.0014178782003000379, 0.003039216622710228, 0.00302088912576437, 0.0017587724141776562, 0.0013440514449030161, 0.0019731060601770878, 0.0018105298513546586, 0.0022669341415166855, 0.0014584966702386737, 0.0018291708547621965, 0.0017614207463338971, 0.0019327751360833645, 0.0022436212748289108, 0.0019004631321877241, 0.0020351356361061335, 0.0018323154654353857, 0.0018261896912008524, 0.0025245633441954851, 0.0012752980692312121, 0.0016861958429217339, 0.0029578474350273609, 0.0013922610087320209, 0.0013621165417134762, 0.0026720545720309019, 0.0020823455415666103, 0.002546295989304781, 0.0019531074212864041, 0.0023136097006499767, 0.0023932354524731636, 0.0015885061584413052, 0.0021233547013252974, 0.0029152389615774155, 0.0029713318217545748, 0.0021010180935263634, 0.0015013427473604679, 0.0028290189802646637, 0.0016307128826156259, 0.0018014305969700217, 0.0021772254258394241, 0.002303756307810545, 0.0020594540983438492, 0.0013560816878452897, 0.0016577019123360515, 0.0025848080404102802, 0.0019740506540983915, 0.0012272833846509457, 0.0016599943628534675, 0.0019788136705756187, 0.0022736811079084873, 0.0019280200358480215, 0.0011238233419135213, 0.001760795246809721, 0.0019724597223103046, 0.0017314036376774311, 0.002370460657402873, 0.0024384430143982172, 0.0021203525830060244, 0.0021242606453597546, 0.0025945005472749472, 0.0024544480256736279, 0.001777106779627502, 0.0032527120783925056, 0.002399007324129343, 0.0020498435478657484, 0.0023860610090196133, 0.0019530174322426319, } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { 10134, 17568, -2796, 2629, 1256, 7783, 1800, 2386, 15048, -3531, -7031, 6242, -9402, 12506, 6964, 11818, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 5.3106763516552746e-05, 7.2901857492979616e-05, 6.0732723795808852e-05, 8.3830920630134642e-05, 6.3487896113656461e-05, 7.3381052061449736e-05, 5.8412206271896139e-05, 6.9901114329695702e-05, 0.00010607603326207027, 6.6033040639013052e-05, 0.00010090338764712214, 6.640608626184985e-05, 0.00010470783308846876, 5.9989182773279026e-05, 8.7937427451834083e-05, 7.7700176916550845e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -111,29,57,-28,-58,-25,-57,-8,-65,14,-30,-35,18,39,31,-41,-6,-17,73,-9,0,-18,127,46,31,42,4,32,-62,-108,-73,25,-46,-48,20,26,4,18,-2,42,-14,-8,-61,16,-68,-20,6,64,-30,16,-61,-29,-2,1,37,-58,-101,1,-5,95,63,39,-1,9,-34,-36,-45,26,-51,-68,20,9,15,-19,-69,-25,-35,-1,-61,1,-59,78,65,-64,-5,62,2,42,14,-21,-25,-10,-18,-22,-57,2, 
  /* [1][0][][] */ 17,21,55,-82,-46,-60,-17,-3,-16,35,65,-83,-18,-20,-96,-52,-4,-17,-83,20,3,-54,27,29,-36,-43,-12,-47,67,-111,125,-76,51,14,-6,77,35,90,-1,-22,29,17,5,2,-12,62,-127,-57,-73,-37,-24,-28,24,-57,-14,52,20,-16,-11,28,40,56,9,-97,8,15,-84,5,6,-11,-98,11,-39,-31,24,-79,-7,34,-13,-79,-26,-9,-90,-28,23,-54,-40,12,-102,-28,-85,46,34,69,-88,58, 
  /* [2][0][][] */ 90,-22,-5,41,-2,-35,66,12,-22,-37,-24,9,-60,-13,36,-36,-86,-25,-33,39,-9,-78,-46,41,14,-73,4,-15,-26,37,-72,111,-58,127,-43,20,-15,-25,-27,-35,-87,77,57,-20,-55,-2,-26,-10,42,5,-12,-37,63,7,-34,59,32,-6,19,-28,-8,19,-44,18,62,-12,12,-5,42,55,-34,-24,35,50,58,36,46,-64,101,62,76,-30,-28,19,-41,35,10,74,14,27,1,23,-47,38,9,26, 
  /* [3][0][][] */ -14,-11,-17,-3,17,-28,5,-65,-26,58,37,43,14,2,-50,27,8,-48,10,1,2,127,37,-58,-8,37,-17,4,52,-26,58,-7,-15,15,-20,-5,16,40,31,22,-81,-30,-22,32,-42,35,19,0,-22,-30,-22,-25,37,-87,-22,-39,6,62,-16,13,10,-4,-32,-5,19,63,-40,13,-22,-2,6,-37,-24,-51,27,-4,13,0,-54,-17,-22,7,-33,7,-10,-29,19,-22,3,12,4,-4,43,31,-46,46, 
  /* [4][0][][] */ 22,11,-43,13,26,11,-56,-6,-29,87,86,-12,-12,14,-11,-66,15,-32,-43,47,8,-42,61,83,-92,14,-127,12,-57,-62,13,4,-50,-61,9,71,5,37,36,27,-47,-48,35,-10,-30,10,-24,50,-39,66,-9,15,33,-20,-73,17,57,-35,15,-8,67,3,25,2,-29,33,-44,19,-66,39,-54,80,48,-60,-36,-42,28,-53,-21,4,-30,85,-67,-2,-21,22,28,-48,45,-2,9,10,-61,-15,20,26, 
  /* [5][0][][] */ -74,36,48,-16,35,-16,66,-33,-20,42,-10,-48,40,-37,-43,-32,-10,-25,61,14,-93,-3,-73,35,-25,-7,43,23,46,-86,-2,53,47,127,-12,37,-11,23,47,-29,-13,92,81,-41,-5,58,53,-4,-2,17,-7,28,13,-37,27,-99,47,-44,-63,-51,60,90,-41,-7,71,-43,-95,-76,-68,-34,-68,-4,-12,6,-24,-55,5,-48,-42,-33,118,-31,6,-79,-87,38,31,-27,-60,41,43,-13,-3,22,6,93, 
  /* [6][0][][] */ 48,0,-96,45,-45,-69,100,97,-58,41,-16,93,-104,-71,78,48,12,-50,-1,13,-32,-55,-65,-37,-46,19,67,31,47,24,62,-72,28,26,2,-80,10,1,8,51,4,15,-72,-51,9,-67,-90,36,39,-109,-5,86,32,27,-43,-49,61,38,-4,-35,-127,32,-105,-5,30,-19,15,46,48,38,6,-73,-56,32,95,28,77,-19,86,-56,-8,-70,-64,50,18,-67,44,23,-40,75,64,31,-42,-7,-12,108, 
  /* [7][0][][] */ 13,63,-19,-51,-11,-40,25,-1,-57,38,-37,-53,-37,25,-9,-24,-35,-59,-40,39,-8,127,9,10,-18,19,23,19,32,38,70,-13,67,10,-8,22,8,-6,10,45,-59,-1,18,-31,-2,-31,62,-23,17,-43,-86,-35,-44,-13,14,-6,16,5,-64,13,11,103,29,-27,-15,12,-37,21,-23,-14,-65,39,15,46,-26,50,-39,40,-12,-46,-6,-24,47,-65,31,-20,-14,3,-5,50,-82,46,52,-12,-44,9, 
  /* [8][0][][] */ -11,76,-15,20,-25,-45,-78,15,-77,-31,13,-15,-48,29,2,84,5,-52,15,20,39,28,11,-5,-49,88,8,22,-20,-6,-38,-35,-17,-57,-24,-44,-35,34,55,18,-6,-31,27,28,-61,-33,13,-10,-31,1,34,61,-15,-40,-53,91,-27,23,17,-31,-23,12,24,47,-29,-43,-54,0,-43,16,-14,22,-21,-47,-106,-22,-65,25,-80,-39,-27,8,-31,-25,-2,-11,28,16,12,50,-73,-9,-76,-127,-4,-39, 
  /* [9][0][][] */ -26,21,-84,44,-25,-29,66,37,-23,62,-28,93,-24,-31,42,127,22,-4,58,4,5,31,51,-114,-49,-6,22,-4,6,-11,47,61,-30,-10,-3,-107,28,-12,-22,-3,-23,20,44,-21,-14,4,22,13,39,104,14,-7,-56,-84,6,-3,-1,-10,69,9,-66,71,-65,-15,95,4,-24,18,-89,21,36,47,8,80,-23,-19,-30,23,-69,-10,48,3,75,-16,14,3,-23,-33,-52,3,-13,10,76,62,-60,-10, 
  /* [10][0][][] */ 39,2,-18,-8,-17,-51,52,-8,2,-11,-10,-10,-77,-5,-11,-15,-51,-48,2,3,29,49,20,-9,-48,77,41,-7,-41,-49,-15,-4,61,-38,27,32,51,-67,71,127,-1,-38,15,28,-36,-65,-9,38,13,82,-70,-44,-16,3,19,33,10,-54,66,50,12,51,-35,-22,5,-24,19,51,24,-23,-6,46,89,12,15,-50,20,-38,18,8,-33,37,34,11,-34,-5,-4,29,-36,-17,0,48,40,61,-34,2, 
  /* [11][0][][] */ -35,-26,36,-58,18,-24,-21,-50,44,-45,8,8,-19,10,12,9,-48,-30,52,21,-81,6,-73,-63,-11,21,-20,40,29,-44,22,-34,25,-5,10,9,-58,9,-115,24,-81,63,-34,63,0,15,-21,-34,15,-27,-75,-43,14,8,70,-61,-30,-62,4,-55,-9,-35,-25,-127,17,-60,70,75,113,24,70,-11,-46,-27,54,-26,97,37,34,65,28,2,-4,61,82,5,-3,-13,-52,-65,-36,32,34,49,45,63, 
  /* [12][0][][] */ 24,-25,-4,-41,28,71,-13,27,35,69,3,29,7,23,-1,-4,-49,48,9,28,127,14,50,-70,32,12,-59,-58,-15,55,22,25,9,-7,16,-49,33,5,-14,-13,22,-18,21,55,9,29,9,-19,-50,4,14,7,-15,-15,8,8,-26,51,13,49,27,-62,29,-73,-8,73,-28,-33,-15,-39,44,7,-3,6,-5,43,-22,38,-82,-28,-28,20,75,21,-19,56,-14,-67,39,2,-48,33,64,1,-30,-74, 
  /* [13][0][][] */ -27,19,-23,-54,-24,-37,0,-51,2,-14,-34,-98,52,-100,-49,-84,-10,-54,-106,-37,-114,-4,20,86,-39,7,101,-2,18,-45,70,60,15,-15,-120,127,-33,-69,32,-40,109,9,3,49,6,-86,64,-47,72,-12,-62,4,31,-3,14,77,60,-55,-44,3,73,71,15,-99,-12,49,-39,45,-76,-51,-74,18,-67,9,-59,-71,-92,12,13,78,-22,85,28,-100,49,38,24,-6,-22,-9,-25,32,-57,28,-39,-21, 
  /* [14][0][][] */ -2,11,-107,-31,76,114,-88,-6,28,-46,76,-12,19,-31,-28,-65,-68,37,40,127,0,-38,-1,-2,17,37,-48,75,13,-20,-31,9,56,4,-26,-12,-16,46,71,-5,64,-5,30,-23,15,-51,55,-44,31,-19,2,-21,45,22,-49,32,11,72,-108,-15,-17,-73,-36,-105,-5,-60,-66,-11,-97,41,-25,22,-1,-36,-21,-46,34,-14,-45,-54,16,-5,-17,-16,-11,41,-6,-27,-23,71,88,16,-5,-50,-50,-67, 
  /* [15][0][][] */ -60,-50,11,-47,6,-21,-28,-71,-19,6,-15,77,1,2,39,75,-111,-38,11,-71,24,-49,-16,-79,36,12,47,-50,-55,-101,-76,37,-30,60,68,-88,-19,-48,13,-17,-24,0,39,-27,-17,10,59,89,-44,-3,10,-47,-28,36,8,-62,-101,-10,75,17,-27,15,-92,14,-64,-14,14,8,53,-69,88,-10,45,-38,-43,-32,19,13,47,4,-2,68,47,15,7,3,-127,9,-11,-56,-82,34,41,-31,-5,55, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0022570374421775341, 0.0030983288306742907, 0.0025811407249420881, 0.0035628140904009342, 0.0026982356794178486, 0.0031186945270746946, 0.0024825187865644693, 0.0029707972425967455, 0.0045082313008606434, 0.0028064041398465633, 0.0042883940041065216, 0.0028222585096955299, 0.0044500827789306641, 0.002549540251493454, 0.0037373404484242201, 0.0033022575080394745, } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { 1423, 56, -2357, -4990, 9210, -5053, -1180, -1899, -960, -1887, 10530, -2412, -1185, 6013, 9546, -4191, 17731, -4087, -5365, 390, -1709, 55, -615, -3159, 234, -8180, -2723, -4159, 625, -8666, -145, 667, 5989, 465, 132, 5, 161, -1393, -228, 7495, 552, -2427, -199, -7727, 15552, 10320, 3868, 10931, -2395, 6331, 12252, -1720, -161, -3696, -622, 8606, 362, -347, 16659, 2285, 5912, 5610, 2479, -6613, -630, 774, -1597, 5826, -168, -2505, 909, -862, 10835, 83, -646, 11771, -868, -1183, 5983, -2252, -1520, 13984, -4220, 4594, 16476, -3037, -4172, -2350, 3733, -4651, 11429, -92, -2320, -1103, -7164, -3879, };
const TfArray<96, float> quant10_scale = { 96, { 0.0003048950748052448, 0.00018917453417088836, 0.00011923428246518597, 0.0001430897245882079, 0.00016351530211977661, 0.00032438186462968588, 0.00037130468990653753, 0.00019570128642953932, 0.00029544677818194032, 0.00015871060895733535, 0.00010084239329444245, 0.00021286061382852495, 0.00029534957138821483, 0.00014152085350360721, 0.00013823258632328361, 0.0001470439019612968, 8.3288978203199804e-05, 0.00024085845507215708, 0.00013716681860387325, 0.00010624488641042262, 0.00023858883650973439, 0.00045611950918100774, 0.0002516885579098016, 0.00015152168634813279, 0.00077037507435306907, 0.00013231487537268549, 0.00031617397326044738, 0.00011602779704844579, 0.00015949802764225751, 8.762563084019348e-05, 0.00028430524980649352, 0.0002397995995124802, 0.00028207738068886101, 0.00021077068231534213, 0.00028091942658647895, 0.00049648410640656948, 0.00020129924814682454, 0.00026437020278535783, 0.00039797107456251979, 0.00015583733329549432, 0.00021252529404591769, 0.00022938440088182688, 0.00024883641162887216, 8.9729961473494768e-05, 0.00011289348913123831, 0.00011607113992795348, 0.00017925388237927109, 0.00010983121319441125, 0.00019458324823062867, 0.00011046627332689241, 0.00014056450163479894, 0.00016829304513521492, 0.00018088187789544463, 0.00020540418336167932, 0.00030943207093514502, 0.00016949369455687702, 0.00018973920668940991, 0.00019846817303914577, 0.00011878449731739238, 0.00011452637409092858, 0.00019616185454651713, 0.00026830669958144426, 0.00021403875143732876, 9.7552976512815803e-05, 0.00021080742590129375, 0.00028024241328239441, 0.00037726768641732633, 0.00019266469462309033, 0.0002651480317581445, 0.00015626022650394589, 0.00024714902974665165, 0.00016105052782222629, 9.5304058049805462e-05, 0.00028527321410365403, 0.00037235097261145711, 9.5406612672377378e-05, 0.00012502215395215899, 0.00014174908574204892, 0.00024501892039552331, 0.00024929782375693321, 0.0002721850760281086, 0.00010645239672157913, 0.00028080109041184187, 0.00016733816300984472, 6.7185959778726101e-05, 0.00025253024068661034, 0.00013607357686851174, 0.00023109967878554016, 0.00019862613407894969, 0.00018495658878237009, 0.00013109340216033161, 0.00032575574005022645, 0.00019571365555748343, 0.0003547279629856348, 9.3568800366483629e-05, 0.00030008444446139038, } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 21,104,-4,61,-85,35,42,55,53,-104,-124,64,-7,10,26,-16,-115,49,39,24,44,51,73,85,21,12,-37,32,-16,32,16,-15,-62,-9,-47,59,36,48,9,3,36,-26,-1,67,-112,-33,-3,-29,-21,-53,-50,-20,1,115,0,16,-113,-87,-77,-90,-88,17,-60,13,-14,43,85,-36,-45,41,48,12,-35,19,34,-15,68,-61,-70,43,7,-77,49,-58,-111,-11,-18,36,-127,-14,-127,52,99,14,127,11, -36,-52,8,105,-37,113,-20,-4,69,12,-122,117,-39,-16,-107,127,-117,100,62,82,127,1,101,127,3,5,17,70,-2,127,-2,-127,66,95,2,25,62,76,-23,-105,127,-1,92,127,-116,-73,127,-34,3,-127,-99,-32,11,127,-24,-127,21,40,-127,-60,7,-127,14,88,-20,72,127,-59,-1,127,127,32,-61,34,-39,-119,66,-50,-8,127,-2,-24,127,-84,-120,-14,127,66,92,88,-74,9,127,-16,96,34, 18,-127,2,12,-66,23,-11,61,27,64,-73,74,-9,64,53,-54,-43,34,21,9,31,41,39,59,13,-32,32,42,-14,25,-6,-57,-40,-95,-36,127,8,-10,31,74,-7,43,-23,124,-14,-18,-5,19,22,-42,-25,-19,-39,20,12,29,54,-74,-35,-127,-127,53,-76,-2,38,-7,-27,-18,-59,14,39,-4,-16,-37,-14,-21,61,1,-80,6,12,-127,46,2,-15,-5,17,-57,-123,0,-45,49,25,43,99,4, 
  /* [0][1][][] */ 77,-4,73,127,-20,-48,127,62,-24,-127,-127,127,0,-118,-91,39,-88,-40,88,36,-95,-9,-127,-40,0,85,-104,127,-97,79,127,66,29,57,10,102,-127,66,-29,-35,52,-116,28,113,-127,-58,-3,-127,-111,-86,-101,1,41,-23,89,-1,-127,-11,-45,30,-38,-21,-5,64,-92,-8,82,-112,-46,34,-29,-97,-81,54,127,-119,127,93,-55,-30,127,-68,-18,93,-47,1,-7,127,-16,2,-67,35,5,-81,88,-6, -127,-14,-55,71,-124,-127,-110,-127,91,27,-44,33,-85,-127,-48,124,-127,-127,127,127,29,-127,-126,104,-127,100,23,69,-80,-8,-119,58,-127,118,127,-54,-1,127,127,-127,-50,43,24,34,-3,-127,-96,-100,-17,-98,-54,127,9,49,37,-61,35,45,74,-19,12,-8,-127,127,-6,-127,59,127,29,58,-96,-64,-22,46,-93,-127,89,127,127,-51,-82,-18,-73,64,-127,-71,113,66,117,127,-70,-127,-106,-48,62,127, 53,17,119,81,-43,-3,3,43,-57,114,-80,117,6,-12,-106,43,13,-10,20,-8,-103,7,-74,-59,1,45,127,-18,127,106,32,-101,15,-127,-22,100,-108,-3,-45,-58,-6,127,37,76,-35,-12,-35,-67,127,-61,-127,-13,21,-44,-127,40,104,1,-107,111,-76,-2,14,87,127,-53,4,-34,-73,7,-19,-40,-127,-127,15,-50,34,-30,-91,-22,-68,-88,-1,127,-98,23,8,13,-40,-21,-2,28,3,127,52,-15, 
  /* [0][2][][] */ 5,-105,47,-12,-26,55,29,72,-13,-70,-10,-85,32,17,-21,26,-19,31,-22,51,11,49,23,4,34,127,5,-18,-38,18,-7,9,19,-35,-38,24,44,-6,-8,-56,-8,8,-12,-4,-42,-23,-36,-5,7,80,22,6,7,32,-18,-15,-15,-16,9,95,-34,18,70,-41,-20,57,-37,-26,20,8,-2,94,-24,10,7,1,-55,-23,-20,-8,30,-45,-17,-58,-50,38,-44,-39,-90,43,-7,31,-14,-10,39,-9, -56,21,127,9,127,92,-18,-7,-127,1,-51,-89,127,5,-127,20,-6,90,-19,-31,36,5,110,28,60,11,-3,30,-27,79,-13,13,-68,56,7,-47,55,37,11,-93,-25,13,-127,31,-21,-12,-61,-35,5,-40,7,78,127,-29,-19,-112,-45,127,-22,50,88,-110,83,54,-28,34,-8,1,127,-39,-15,127,-48,15,-24,-82,-14,-82,-19,-18,-3,-55,-10,-118,-44,127,9,11,76,65,48,9,-11,-13,54,-1, -1,94,27,-37,-19,30,-7,43,8,82,13,-31,9,-12,8,18,-37,38,2,16,-17,40,-16,-20,18,87,12,33,-2,19,-26,-77,-2,-54,-29,-12,10,-28,-12,-25,4,8,24,-11,-67,-24,-31,8,30,80,-34,5,10,6,17,11,-19,-2,-2,122,-24,13,39,-9,33,13,-65,-2,19,12,-7,97,1,-25,-15,31,-78,-4,-22,-5,1,-28,-5,-24,-29,25,-20,-48,-71,19,38,18,-35,18,4,-9, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.012958040460944176, 0.0080399177968502045, 0.0050674569793045521, 0.0060813133604824543, 0.0069494000636041164, 0.013786229304969311, 0.015780448913574219, 0.0083173047751188278, 0.012556487694382668, 0.0067452006042003632, 0.0042858016677200794, 0.0090465759858489037, 0.012552356347441673, 0.0060146362520754337, 0.0058748847804963589, 0.0062493658624589443, 0.0035397815518081188, 0.010236483998596668, 0.0058295894414186478, 0.004515407606959343, 0.010140025056898594, 0.019385078921914101, 0.010696763172745705, 0.0064396718516945839, 0.032740939408540726, 0.0056233820505440235, 0.013437393121421337, 0.0049311812035739422, 0.0067786662839353085, 0.0037240891251713037, 0.012082973495125771, 0.010191482491791248, 0.011988288722932339, 0.0089577538892626762, 0.011939075775444508, 0.021100573241710663, 0.0085552176460623741, 0.011235733516514301, 0.016913769766688347, 0.0066230865195393562, 0.0090323248878121376, 0.0097488369792699814, 0.010575547814369202, 0.0038135233335196972, 0.0047979732044041157, 0.0049330233596265316, 0.0076182899065315723, 0.0046678264625370502, 0.0082697877660393715, 0.0046948166564106941, 0.0059739910066127777, 0.0071524539962410927, 0.0076874797232449055, 0.0087296776473522186, 0.013150863349437714, 0.0072034816257655621, 0.0080639161169528961, 0.0084348972886800766, 0.0050483411177992821, 0.0048673707060515881, 0.0083368783816695213, 0.011403034441173077, 0.0090966466814279556, 0.0041460013017058372, 0.0089593157172203064, 0.011910302564501762, 0.016033876687288284, 0.0081882495433092117, 0.011268790811300278, 0.006641059648245573, 0.010503833182156086, 0.006844647228717804, 0.0040504224598407745, 0.012124111875891685, 0.015824915841221809, 0.004054781049489975, 0.0053134411573410034, 0.0060243359766900539, 0.010413303971290588, 0.010595156811177731, 0.011567865498363972, 0.0045242267660796642, 0.011934046633541584, 0.0071118716150522232, 0.0028554031159728765, 0.010732535272836685, 0.0057831271551549435, 0.009821736253798008, 0.008441610261797905, 0.0078606549650430679, 0.0055714691989123821, 0.013844618573784828, 0.0083178300410509109, 0.01507593784481287, 0.0039766738191246986, 0.012753589078783989, } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 5130, 2568, 686, -780, 4652, 6166, 5053, 1933, -735, 5783, 628, -3065, 2679, 2598, 370, -429, 2368, 3828, -480, 261, 3589, 6582, 9548, -1631, -3089, -258, 8219, 215, 1449, 1149, 6597, -922, 7100, 2662, 3319, -4584, 454, -3895, 202, 1548, 1559, 799, 852, 30, 1084, 1911, 2438, 2727, 2034, 1585, 5690, 2258, -1340, 1515, 898, 1470, 1570, 2601, 8004, 797, -745, 3719, 3519, 3613, 2360, 6542, -4231, 1906, 5323, -297, 4140, 1514, 1901, 2808, 3658, 2018, -467, 2256, 2520, 2584, 2189, 2353, 7416, 393, 1650, 2431, 534, -1094, 10478, -339, 846, -896, 4795, 3446, -17, -601, };
const TfArray<96, float> quant12_scale = { 96, { 0.00014900373935233802, 0.00015406294551212341, 0.0001605330326128751, 0.00026134747895412147, 0.00016098706691991538, 0.000132000059238635, 0.00017024845874402672, 0.00014876597560942173, 0.00015814714424777776, 0.00013213483907748014, 0.00028428199584595859, 0.00015590249677188694, 0.00020385110110510141, 0.00017568375915288925, 0.00022687033924739808, 0.0002270757540827617, 0.00026337386225350201, 0.00019432978297118098, 0.00013334190589375794, 0.00018436314712744206, 0.00016712356591597199, 0.00013109190331306309, 8.9535169536247849e-05, 0.00014515970542561263, 0.00019465397053863853, 0.00019747400074265897, 0.000103861624666024, 0.00014829885913059115, 0.00018220415222458541, 0.00019529179553501308, 0.00012409816554281861, 0.00026493240147829056, 0.00011278680904069915, 0.00020237216085661203, 0.00022958694898989052, 0.00013323027815204114, 0.00024978816509246826, 0.00015599137987010181, 0.00019036319281440228, 0.00023793957370799035, 0.00024979899171739817, 0.00024659864720888436, 0.00033410565811209381, 0.00029956386424601078, 0.00029850730788893998, 0.00020485528511926532, 0.00023147136380430311, 0.00023218771093524992, 0.00027035950915887952, 0.00027539551956579089, 0.00012965274800080806, 0.00018192616698797792, 0.00021116199786774814, 0.00019911129493266344, 0.00025413199909962714, 0.00026958229136653244, 0.00022726779570803046, 0.00015820655971765518, 0.0001064689495251514, 0.00025951562565751374, 0.00026888874708674848, 0.00017990800552070141, 0.00017443155229557306, 0.00017264600319322199, 0.00023738534946460277, 0.00011379741044947878, 0.00015195297601167113, 0.00022051978157833219, 0.00012619359767995775, 0.00033298245398327708, 0.00015654643357265741, 0.00017571607895661145, 0.00020621249859686941, 0.00014932638441678137, 0.00015472932136617601, 0.00012522358156275004, 0.00025802207528613508, 0.00016688616597093642, 0.00017819920321926475, 0.0001891208958113566, 0.00022742367582395673, 0.00015953976253513247, 0.00010779924195958301, 0.00019311468349769711, 0.00022642452677246183, 0.00024985001073218882, 0.00018649127741809934, 0.00024308754655066878, 8.8497239630669355e-05, 0.00022722629364579916, 0.00026632199296727777, 0.00023298671294469386, 0.00016963518282864243, 0.00012610002886503935, 0.00032386597013100982, 0.00018357987573835999, } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -66,58,-10,-5,-47,-58,-54,-35,70,-51,50,-63,94,-127,36,-123, 
  /* [1][0][][] */ -127,36,-101,-88,-87,13,-24,70,-47,-3,126,-40,25,86,42,64, 
  /* [2][0][][] */ -53,-4,-79,10,-17,-37,34,-38,-94,127,51,-9,51,55,-32,122, 
  /* [3][0][][] */ -54,-81,2,-47,-82,-5,-35,-127,14,24,35,-76,-59,-46,-97,-32, 
  /* [4][0][][] */ 87,22,-34,59,-58,-5,-127,80,19,95,18,70,22,-2,-70,-83, 
  /* [5][0][][] */ -120,17,-49,-43,18,-18,-34,-92,49,-60,-13,-11,-22,-127,-86,-61, 
  /* [6][0][][] */ -10,-19,-35,24,-75,55,45,-50,-22,-42,127,-23,-17,-1,-110,32, 
  /* [7][0][][] */ -85,108,117,-107,80,61,44,-80,47,89,-83,-29,61,7,57,127, 
  /* [8][0][][] */ -81,-3,56,10,26,5,107,127,-32,20,-56,-86,54,66,-93,-45, 
  /* [9][0][][] */ 16,30,89,31,-89,-36,-87,-127,20,-6,77,42,-56,-66,22,18, 
  /* [10][0][][] */ -3,-107,13,-61,-127,75,31,25,-42,-51,-6,33,-11,44,-104,19, 
  /* [11][0][][] */ 73,-77,12,62,-77,-51,56,-30,127,111,-54,36,20,-77,-20,94, 
  /* [12][0][][] */ -74,-54,127,-13,55,9,12,43,55,-22,77,69,-54,17,-93,20, 
  /* [13][0][][] */ 6,-33,16,39,2,40,127,37,-98,13,1,14,-20,116,112,-61, 
  /* [14][0][][] */ 127,-63,116,-23,55,56,84,58,76,56,43,14,92,-47,35,-47, 
  /* [15][0][][] */ 20,127,-5,-14,14,117,-56,68,-17,-10,-42,-12,-40,106,-13,-28, 
  /* [16][0][][] */ -55,48,124,-51,29,80,2,-18,1,6,-21,42,88,-6,85,127, 
  /* [17][0][][] */ -11,65,56,-127,17,-34,8,-93,-42,14,-7,74,-30,-58,119,-37, 
  /* [18][0][][] */ -92,12,-60,-69,120,97,-43,-50,36,78,126,58,1,127,-33,-22, 
  /* [19][0][][] */ 25,127,89,80,56,-26,-22,14,-35,99,60,111,50,82,-57,27, 
  /* [20][0][][] */ 69,-18,10,66,-63,-2,-46,33,-56,-56,-127,-19,55,-30,38,0, 
  /* [21][0][][] */ -27,-20,-29,116,-40,37,-127,71,8,8,18,27,-33,28,-59,-3, 
  /* [22][0][][] */ 75,39,-108,-50,127,63,-59,33,76,110,40,92,-15,62,-7,58, 
  /* [23][0][][] */ -88,31,-18,6,22,71,110,103,-16,127,-17,-36,9,44,-47,-43, 
  /* [24][0][][] */ 16,-79,47,0,127,31,56,-45,22,-1,49,32,-104,33,0,-39, 
  /* [25][0][][] */ 127,-29,84,29,19,-6,-23,82,109,-25,-78,-12,125,-62,87,19, 
  /* [26][0][][] */ 62,50,127,92,72,-1,-86,12,-14,76,1,122,42,-78,36,-84, 
  /* [27][0][][] */ -52,29,-72,19,-9,107,5,-106,26,-120,127,45,32,-51,117,76, 
  /* [28][0][][] */ -52,39,-100,-127,36,-75,-7,-50,-103,89,-46,53,-38,34,-41,87, 
  /* [29][0][][] */ 58,93,-79,59,75,64,-47,3,79,45,36,67,-127,8,-32,49, 
  /* [30][0][][] */ -11,81,-127,-51,73,-41,2,49,-68,32,-61,-14,16,58,-30,107, 
  /* [31][0][][] */ 10,-122,97,65,71,-59,-96,40,-45,-4,1,-60,-83,80,36,127, 
  /* [32][0][][] */ -57,44,13,33,-114,27,25,73,30,-127,17,-98,29,35,22,72, 
  /* [33][0][][] */ -55,-10,59,101,-17,32,-93,11,-61,-80,3,-15,-12,-5,13,127, 
  /* [34][0][][] */ -10,18,-88,-84,61,1,-23,65,2,-16,-3,-3,-61,-15,-33,127, 
  /* [35][0][][] */ 78,-6,36,-6,-8,28,-65,-25,-32,-127,-86,-10,-12,-19,36,-27, 
  /* [36][0][][] */ -3,33,-127,-7,14,126,26,45,-12,36,35,9,36,14,-80,89, 
  /* [37][0][][] */ 43,36,68,-58,36,-127,56,-10,-107,57,-74,-31,18,30,103,32, 
  /* [38][0][][] */ -43,107,48,-53,22,31,69,-115,-2,-29,-127,40,-65,-120,-58,12, 
  /* [39][0][][] */ 104,41,-127,-123,-12,-26,-10,-35,26,-42,12,-25,41,13,-120,-81, 
  /* [40][0][][] */ -56,14,-65,-88,-49,-7,0,-127,-9,-16,-10,-41,44,66,60,50, 
  /* [41][0][][] */ -43,-99,-20,127,33,-23,-61,-4,0,-43,78,-62,-51,1,6,-1, 
  /* [42][0][][] */ -4,74,-42,-127,21,35,8,-14,54,2,-24,15,67,0,-5,10, 
  /* [43][0][][] */ -3,44,42,-24,127,28,36,12,0,10,-34,-100,-115,-67,-15,-49, 
  /* [44][0][][] */ 86,23,19,65,-23,12,15,54,30,-29,21,-17,127,-9,-34,-52, 
  /* [45][0][][] */ 8,-126,-67,46,-50,-115,5,44,52,-21,20,53,-110,127,31,-29, 
  /* [46][0][][] */ 0,-61,36,71,-2,-13,-86,64,46,-43,57,-19,43,68,60,127, 
  /* [47][0][][] */ -37,-44,14,88,-2,-5,71,12,7,-56,-127,-47,45,-15,-51,23, 
  /* [48][0][][] */ -59,76,0,-42,2,45,3,-103,39,-25,33,-55,38,-127,-47,-13, 
  /* [49][0][][] */ -68,-6,47,-37,2,-6,124,127,-34,-39,-20,24,-51,31,-70,29, 
  /* [50][0][][] */ 75,31,-84,41,48,-121,-63,6,-94,30,-47,11,23,-101,-127,-57, 
  /* [51][0][][] */ -49,59,-36,119,-45,52,-49,-73,-44,-87,-4,-51,7,20,-22,127, 
  /* [52][0][][] */ -117,-3,12,-31,29,48,55,-4,22,-120,-56,-37,-103,-90,-127,-19, 
  /* [53][0][][] */ -50,-101,-91,-113,-52,-9,-17,70,51,-94,-47,57,-63,7,83,127, 
  /* [54][0][][] */ 6,-74,5,2,-69,62,44,-21,-22,-94,69,59,-27,-7,-127,40, 
  /* [55][0][][] */ -35,-39,-33,18,72,-41,48,84,-70,-65,-127,-25,53,-43,-36,40, 
  /* [56][0][][] */ 51,-29,-49,-17,-127,21,-80,1,0,6,-28,-5,97,-28,44,13, 
  /* [57][0][][] */ -37,12,20,-25,127,23,42,68,-32,48,16,5,-58,89,-109,-24, 
  /* [58][0][][] */ 29,-1,-7,-13,28,0,-49,-52,36,-127,-55,10,-72,-38,-11,40, 
  /* [59][0][][] */ -127,-51,-4,5,-8,26,-80,-29,76,109,-68,-21,-23,13,-6,2, 
  /* [60][0][][] */ 40,-51,-9,6,-127,-38,6,-6,-4,35,-12,48,21,-43,48,32, 
  /* [61][0][][] */ 15,44,-90,-18,-26,-14,-116,-65,-14,-1,48,127,61,-42,92,46, 
  /* [62][0][][] */ 91,-29,34,-46,-15,61,7,119,-81,127,33,101,85,62,106,104, 
  /* [63][0][][] */ 23,-127,-15,-12,-77,14,44,-29,1,-25,0,-1,-47,120,106,32, 
  /* [64][0][][] */ -26,-22,-127,-30,30,40,68,-5,37,-92,57,-1,93,-46,-60,103, 
  /* [65][0][][] */ -19,6,58,66,80,-34,97,84,-38,16,-127,-92,48,113,-68,-15, 
  /* [66][0][][] */ -43,-127,6,-67,-50,-102,34,-40,8,-23,5,75,-68,-53,-59,72, 
  /* [67][0][][] */ -45,-112,-80,-37,-71,127,-11,-111,-82,-48,-37,-102,4,-25,-41,24, 
  /* [68][0][][] */ 127,60,14,-24,-62,15,-56,-51,-81,-95,-21,6,12,-22,38,-58, 
  /* [69][0][][] */ 29,-5,36,-25,-4,-54,-34,14,4,127,-27,3,-8,17,48,-14, 
  /* [70][0][][] */ 22,-30,-46,77,-97,24,2,-125,94,127,35,76,40,-75,3,49, 
  /* [71][0][][] */ 125,-55,74,127,-59,-58,51,-20,105,32,-86,20,58,-63,63,-34, 
  /* [72][0][][] */ -8,-25,15,127,79,14,-114,95,87,-9,72,13,-33,-36,-62,84, 
  /* [73][0][][] */ 86,34,52,-120,77,-67,-115,59,-41,127,-35,25,-7,-85,34,-75, 
  /* [74][0][][] */ 79,-8,37,23,-127,-60,60,-20,-47,-33,41,-84,54,-97,13,32, 
  /* [75][0][][] */ 90,127,-117,28,74,99,-26,-31,-34,-21,57,72,-121,94,70,94, 
  /* [76][0][][] */ -72,-56,-5,-35,-53,-6,89,-11,-27,24,91,43,-49,-127,-17,81, 
  /* [77][0][][] */ -71,127,-8,10,-84,-107,60,67,33,-105,-8,94,-54,55,3,112, 
  /* [78][0][][] */ 97,62,-37,28,-59,48,-127,1,-36,-17,-80,8,37,-54,15,34, 
  /* [79][0][][] */ -71,-81,127,52,-20,-127,-55,-43,-6,19,15,31,-62,82,-74,86, 
  /* [80][0][][] */ 9,61,27,-127,-13,24,55,-31,24,0,-21,22,58,-64,-14,0, 
  /* [81][0][][] */ 29,-76,-8,-127,100,34,-13,115,117,22,22,2,-22,27,-77,-78, 
  /* [82][0][][] */ 99,76,115,-6,127,-110,48,27,4,99,-67,42,-14,-82,33,-117, 
  /* [83][0][][] */ -60,56,24,6,72,34,127,68,33,43,-30,-53,-64,66,-56,-73, 
  /* [84][0][][] */ -7,-127,-14,81,15,-92,-83,18,-95,43,-75,-2,-105,72,4,-71, 
  /* [85][0][][] */ -127,33,-15,-36,-2,-6,-75,-20,-8,-2,-22,-81,-118,-75,-86,11, 
  /* [86][0][][] */ -7,67,107,127,24,-23,62,30,10,25,-47,-99,48,94,-127,-79, 
  /* [87][0][][] */ -22,47,127,-28,-99,-35,11,13,46,-27,19,71,-76,6,-15,-3, 
  /* [88][0][][] */ -7,-51,-127,36,58,57,-22,55,-30,-59,-107,-99,127,5,4,18, 
  /* [89][0][][] */ 29,19,21,-105,7,-65,-40,40,127,-8,28,-68,13,-28,43,-65, 
  /* [90][0][][] */ 12,82,38,24,-73,66,61,127,-5,-30,-38,101,67,16,-42,89, 
  /* [91][0][][] */ -13,6,-29,82,48,80,-53,-85,-64,21,-11,6,-99,-127,-50,-16, 
  /* [92][0][][] */ -10,93,1,-20,-127,5,-100,73,-38,73,100,95,34,-13,33,7, 
  /* [93][0][][] */ 99,58,121,42,-127,-107,0,30,-48,-106,-20,-62,17,-68,-7,-17, 
  /* [94][0][][] */ -36,-127,25,-98,-7,13,-8,-10,77,-11,-3,35,17,48,-25,48, 
  /* [95][0][][] */ -20,-75,-32,-45,127,107,-57,27,80,41,-78,75,-33,123,-62,27, 
};
const TfArray<96, float> quant13_scale = { 96, { 0.0017491783946752548, 0.0018085693009197712, 0.0018845226150006056, 0.003067999379709363, 0.0018898526905104518, 0.0015495695406571031, 0.0019985735416412354, 0.0017463873373344541, 0.0018565143691375852, 0.0015511518577113748, 0.0033372314646840096, 0.0018301641102880239, 0.0023930403403937817, 0.0020623793825507164, 0.0026632668450474739, 0.002665678272023797, 0.0030917874537408352, 0.0022812681272625923, 0.0015653216978535056, 0.0021642681676894426, 0.0019618899095803499, 0.0015389085747301579, 0.0010510674910619855, 0.0017040527891367674, 0.0022850737441331148, 0.0023181785363703966, 0.0012192480498924851, 0.0017409038264304399, 0.0021389233879745007, 0.0022925613448023796, 0.001456808065995574, 0.0031100832857191563, 0.001324022188782692, 0.0023756788577884436, 0.0026951574254781008, 0.0015640113269910216, 0.0029323026537895203, 0.0018312075408175588, 0.002234703628346324, 0.0027932103257626295, 0.0029324300121515989, 0.0028948604594916105, 0.0039221192710101604, 0.0035166274756193161, 0.0035042245872318745, 0.0024048285558819771, 0.0027172788977622986, 0.002725688274949789, 0.0031737929675728083, 0.0032329116947948933, 0.0015220141503959894, 0.002135660033673048, 0.0024788640439510345, 0.0023373989388346672, 0.0029832958243787289, 0.0031646690331399441, 0.0026679325383156538, 0.0018572118133306503, 0.001249855849891901, 0.0030464951414614916, 0.0031565276440232992, 0.0021119685843586922, 0.0020476796198636293, 0.0020267188083380461, 0.0027867041062563658, 0.0013358858413994312, 0.0017838000785559416, 0.0025887165684252977, 0.0014814066234976053, 0.0039089336059987545, 0.0018377234227955341, 0.0020627588964998722, 0.0024207611568272114, 0.001752966083586216, 0.0018163919448852539, 0.0014700194587931037, 0.0030289618298411369, 0.0019591031596064568, 0.0020919085945934057, 0.0022201200481504202, 0.0026697625871747732, 0.0018728624563664198, 0.0012654723832383752, 0.002267003757879138, 0.0026580332778394222, 0.0029330288525670767, 0.0021892506629228592, 0.0028536431491374969, 0.001038883114233613, 0.0026674454566091299, 0.0031263958662748337, 0.0027350678574293852, 0.001991374185308814, 0.0014803082449361682, 0.0038019136991351843, 0.002155073219910264, } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { -25119, -2322, 5379, -17567, 11899, -12380, 24127, -6615, 15220, -10279, 16128, 9973, -2619, -30690, 3653, 6955, };
const TfArray<16, float> quant14_scale = { 16, { 8.8657689047977328e-05, 7.4693416536320001e-05, 6.17312325630337e-05, 6.8666035076603293e-05, 0.00010103749082190916, 0.00014939343964215368, 6.8854380515404046e-05, 7.8868346463423222e-05, 0.00012135046563344076, 9.8378885013516992e-05, 0.0001032650689012371, 7.6826945587527007e-05, 9.4665272627025843e-05, 9.2298520030453801e-05, 5.694851279258728e-05, 8.1262682215310633e-05, } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 30,26,19,22,-20,-79,-11,-13,-35,-72,19,-11,72,-65,54,33,-114,-61,42,-7,81,7,-81,29,-9,70,127,90,2,80,63,-40,2,-3,-4,-2,45,23,-31,7,114,20,26,-21,-10,-12,1,-40,17,-14,79,-20,-79,2,45,29,18,-36,14,22,-23,44,-44,-19,12,-8,66,30,-7,-35,18,56,2,29,-13,46,60,-18,43,15,-6,51,49,39,-56,24,-14,58,21,14,-100,-13,17,7,107,75, 
  /* [1][0][][] */ 21,18,-42,-6,0,-34,94,-78,-63,-30,-57,-47,3,-55,-16,-44,-41,-45,-23,-5,-27,-85,117,-1,2,16,1,56,-49,15,-47,13,-37,17,13,17,-15,47,-73,97,35,16,20,-49,56,-56,-9,31,-78,2,33,-107,-40,28,62,41,29,27,-52,8,-40,16,-4,-35,37,24,96,-5,-64,-127,11,46,23,44,-28,22,-51,-25,75,-25,55,-23,63,-49,-16,-45,-25,6,-15,-42,28,0,51,-52,-35,50, 
  /* [2][0][][] */ 1,-20,13,-13,65,50,-64,25,-52,40,13,-39,35,-12,28,28,45,-13,-127,-16,-11,-45,-19,17,9,-25,-49,22,-24,-29,-13,74,-9,-32,-1,13,-44,23,-16,-37,51,1,-5,41,-5,37,10,-11,-96,28,-11,8,-22,57,5,-76,47,11,56,32,-21,-6,-17,59,29,-10,-41,-12,-8,5,-17,-44,16,54,29,71,-53,-14,-24,-33,27,35,41,-26,-19,-51,-2,-45,-13,-28,-9,52,-7,-1,85,-32, 
  /* [3][0][][] */ 47,-29,3,-110,-21,-61,103,-34,30,115,-53,-25,4,-22,-22,67,32,18,-21,27,-57,8,18,24,-40,83,47,13,-37,-6,-64,43,16,-21,31,5,2,-39,-58,84,22,4,-24,22,65,-47,-11,50,44,-26,17,-63,104,49,36,5,18,3,-14,-29,-63,42,68,-10,-11,-19,126,-49,-27,-43,-51,52,26,-81,-3,-65,22,-41,127,10,15,-51,-18,-44,-35,-33,77,66,-16,46,-60,19,13,-79,-25,41, 
  /* [4][0][][] */ -21,76,26,15,-23,1,-15,-22,20,-34,-4,-17,25,35,-35,28,-21,-46,-17,-60,36,-38,-52,34,-22,-26,-8,12,-32,127,-68,-17,10,-35,2,-31,69,37,-47,12,24,8,43,-40,-38,-9,47,-11,21,-28,-58,-26,-75,23,60,27,-15,44,1,18,-48,-55,-30,-14,59,34,-59,-20,-21,10,4,-43,-18,55,54,60,-27,5,-56,38,32,53,38,-65,58,-65,-33,-62,-34,-59,-49,-12,-7,17,29,-24, 
  /* [5][0][][] */ -12,-17,34,-9,-3,-8,-14,4,32,12,-17,6,-21,-28,21,-17,-21,1,-46,-31,-17,13,-19,14,17,-39,59,-20,-1,34,12,71,-20,-71,19,5,-36,-29,-26,-3,-42,-8,-13,16,9,21,-71,17,-15,20,45,-15,16,-73,-1,11,-32,-46,9,-31,33,20,11,33,-37,11,113,-16,-17,-22,17,13,-6,32,33,15,-12,-23,127,29,-23,-11,-28,30,47,56,-3,84,-6,-40,-14,3,11,-6,-29,24, 
  /* [6][0][][] */ 15,-53,53,17,-35,127,-60,-89,-24,-73,-86,67,4,25,-31,64,29,83,4,-42,-77,-16,-94,-72,-14,-65,-18,61,-94,34,-15,-12,22,87,-10,-8,-4,-56,44,-37,-51,32,21,-20,-3,55,-93,-14,36,19,-50,-111,67,10,-52,-31,25,-25,29,-13,6,-37,38,27,44,-75,-77,-38,-80,50,-9,-104,-32,-88,22,-98,67,6,-86,28,-38,86,7,-89,57,-62,-19,-6,-91,86,-92,76,26,-41,78,-92, 
  /* [7][0][][] */ 0,-20,-54,53,-32,-12,32,-11,-92,-5,81,39,0,-75,1,-31,-33,-36,5,-2,-73,-35,-35,-10,65,42,-1,84,-12,38,20,13,-38,-127,31,117,-21,21,-64,29,4,-14,15,-84,29,49,67,103,-21,51,-53,-22,31,-29,38,-38,-10,49,-70,-27,34,20,20,-38,83,-49,96,-23,-69,-57,65,48,1,-50,-85,-32,36,-35,81,-25,13,-17,-65,-29,34,23,-69,44,8,26,7,53,59,-4,73,-6, 
  /* [8][0][][] */ -8,-63,7,-4,-14,8,11,-5,-17,-6,33,54,17,30,-47,-8,57,-4,13,-6,-15,-68,-25,-15,-33,-42,66,4,-29,44,-5,-32,-17,9,0,-7,-47,-27,19,-19,3,46,29,-42,10,-9,23,-21,35,-8,42,21,-3,13,-46,10,-16,93,-57,1,-2,-57,-54,-6,-91,-37,-19,18,8,19,33,-11,-35,-127,38,-101,11,14,-60,21,-44,-3,-2,56,58,-60,-40,48,-52,85,15,-19,-42,-13,-6,-72, 
  /* [9][0][][] */ -30,-22,-33,19,-1,24,-2,48,-34,3,56,61,-21,51,21,-53,-20,26,-18,-37,6,37,-13,13,-34,25,-2,12,29,-5,19,-3,-37,-14,11,54,-7,-10,24,7,6,-22,15,12,8,52,0,34,-44,3,-11,34,116,9,-23,3,22,-11,32,19,-14,2,96,3,20,26,64,14,45,-1,-11,26,-3,-127,-42,-117,-36,-8,29,-2,0,33,8,-28,40,12,-50,-11,-16,109,30,32,44,24,-5,23, 
  /* [10][0][][] */ 25,44,11,-9,-20,14,-53,-26,63,10,-30,17,25,0,0,-61,-49,-12,17,-4,7,-6,-23,-14,6,-34,-97,55,-30,64,-3,2,29,17,-25,14,19,5,-6,12,49,-3,58,-57,-36,-3,25,36,19,9,6,-26,-20,-9,-7,37,-3,17,-22,-1,-16,-30,11,12,0,-27,-111,-38,-62,-30,52,5,-18,32,25,20,51,-6,-116,24,-3,38,2,-1,-3,25,-75,-127,-19,36,14,34,54,-30,14,28, 
  /* [11][0][][] */ 32,-26,2,-7,-66,17,5,0,78,-18,-14,-55,17,4,21,-15,-25,35,21,-66,-2,54,6,-18,44,6,70,11,21,-54,-19,19,33,100,-98,12,33,-8,46,20,-57,51,-24,10,-53,-6,-9,6,52,-31,-25,-5,-17,22,-75,94,-15,0,-11,-35,28,10,12,-58,-1,-47,-127,-92,5,-46,-94,48,58,8,-15,-8,38,64,-108,-25,-2,1,-15,-15,-36,9,64,85,36,-36,7,23,-33,36,82,35, 
  /* [12][0][][] */ 14,15,-27,-10,18,-13,13,25,38,-36,15,0,11,-5,-10,10,-5,-44,-16,1,16,42,6,56,-46,-26,-127,-8,56,-25,30,1,-36,-65,49,-4,35,-22,-9,21,-4,-42,26,34,40,-8,14,-11,-66,8,-58,85,65,-23,26,-61,9,27,-31,-27,3,36,67,-10,-17,-8,33,43,91,15,33,13,-4,-21,-24,-3,-42,-49,41,-69,16,-43,33,-24,8,15,-9,-101,-22,31,-43,18,11,54,9,31, 
  /* [13][0][][] */ -8,17,-62,39,23,16,-10,-5,31,60,-34,38,-49,-30,51,-51,-2,43,54,21,-33,-48,-16,26,33,50,-25,29,-4,28,53,-21,-16,64,-5,49,13,-39,-58,-37,18,-1,27,18,39,50,-35,53,-44,32,-1,-12,-3,-30,50,38,10,-29,-17,-19,6,33,0,-24,25,91,127,45,23,-25,-45,-14,52,43,-96,32,16,-73,126,-39,7,-39,36,9,23,55,-35,-18,-5,-24,-2,64,29,11,65,55, 
  /* [14][0][][] */ -5,51,18,36,-53,-39,21,18,-68,-17,62,3,-73,-5,58,-28,-39,39,-43,23,-10,10,-98,1,-53,12,-58,-115,11,-2,27,82,-54,25,11,-21,-11,-69,-12,-43,22,-27,52,-19,-17,36,-72,16,-9,-39,75,36,-22,27,-30,24,-60,32,1,31,23,44,-22,28,11,-36,6,-55,45,58,57,12,-56,44,5,12,23,-19,42,4,-81,97,8,-127,85,0,-8,0,-98,-20,-31,-18,-35,4,52,27, 
  /* [15][0][][] */ 71,-27,14,14,34,3,-22,-7,16,25,-69,-31,57,61,2,-15,7,20,-89,40,5,-8,-13,15,54,-36,74,25,32,-35,-15,64,65,46,-8,-76,46,65,60,45,77,30,-29,16,-48,-127,35,-36,-24,-33,-16,24,-9,-53,-30,51,-7,-6,-24,11,0,-66,-41,40,30,41,-70,45,13,-31,-8,-28,-1,-107,-55,-106,-15,26,-110,39,61,-39,37,9,-65,-8,2,-23,49,88,25,-64,-39,-28,33,-27, 
};
const TfArray<16, float> quant15_scale = { 16, { 0.0037679518572986126, 0.0031744700390845537, 0.002623577369377017, 0.0029183065053075552, 0.004294093232601881, 0.006349220871925354, 0.0029263112228363752, 0.0033519046846777201, 0.0051573948003351688, 0.0041811023838818073, 0.0043887654319405556, 0.0032651450019329786, 0.004023273941129446, 0.0039226869121193886, 0.0024203117936849594, 0.0034536637831479311, } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 10802, 536, -3101, 10194, 1376, 706, 3872, -2137, 2664, -5376, 666, -2837, 7715, -1742, -1368, -6707, 2081, 1295, -5876, -155, -1572, 1960, -5511, 553, -33, 7163, -7878, -6192, -2821, -1438, 2823, -346, 15325, -390, 590, 435, 2343, 11162, 3378, 8091, 2835, 3958, -1331, 2205, 636, 4493, 15977, 6926, -5106, -366, -3014, -3047, 717, -3920, -464, 2289, 649, 3927, 1745, 2827, 2234, -2227, 2149, 7954, 12644, 1088, 11977, 8590, 1868, -285, 10726, -2653, -48, 968, -3811, 1204, 13914, 350, 8006, 12086, 7529, -1707, 10681, 11573, -210, -1586, 9144, -6665, 9767, 596, -6986, -2482, -657, 3534, 18528, 2345, };
const TfArray<96, float> quant16_scale = { 96, { 8.9532113634049892e-05, 0.00033523622551001608, 0.00022166459530126303, 0.00012402332504279912, 0.00019679359684232622, 0.00050797685980796814, 9.6212294010911137e-05, 0.00024508268688805401, 0.00041382652125321329, 0.00019966620311606675, 0.00023993317154236138, 0.00015423644799739122, 0.00010869864490814507, 0.00018813637143466622, 0.00030685853562317789, 0.00017167124315164983, 0.00051173794781789184, 0.00045499514089897275, 0.00018439405539538711, 0.00024495855905115604, 0.00026523604174144566, 0.00027799792587757111, 0.0001406683586537838, 0.0001832129928516224, 0.0016638860106468201, 0.00015856271784286946, 0.00026261206949129701, 0.00010821892647072673, 0.00036908546462655067, 0.00018630076374392956, 0.00017284667410422117, 0.00025379183352924883, 8.1475787737872452e-05, 0.00041348926606588066, 0.00011267433001194149, 0.0002029149909503758, 0.00034124578814953566, 8.9559471234679222e-05, 0.00036553287645801902, 0.00013109025894664228, 0.00046011630911380053, 0.00019989447901025414, 0.00022933293075766414, 0.00024351059983018786, 0.00018761951650958508, 0.00029382709180936217, 9.1656635049730539e-05, 0.00017841701628640294, 0.00021316972561180592, 0.00039752665907144547, 0.00023223893367685378, 0.00024824118008837104, 0.00015633736620657146, 0.0002167407947126776, 0.0003158200706820935, 0.00026244946639053524, 0.00022401736350730062, 0.00036803950206376612, 0.00043168530100956559, 0.00025019684107974172, 0.0002708549436647445, 0.00040584031376056373, 0.00018513268150854856, 0.00011644485493889078, 0.00021157265291549265, 0.00037266648723743856, 0.00015203493239823729, 0.0001913757441798225, 0.00027281075017526746, 0.00049105740617960691, 9.9253571534063667e-05, 0.00030909359338693321, 0.00064861169084906578, 0.00017727255180943757, 0.00012940711167175323, 0.00022962086950428784, 8.0199075455311686e-05, 0.00020211479568388313, 0.00017593383381608874, 0.00013802890316583216, 0.00014059174282010645, 0.00022793853713665158, 7.0913505624048412e-05, 0.00020513604977168143, 9.4339113275054842e-05, 0.00032104284036904573, 0.00016810916713438928, 0.00018463512242306024, 0.00011329805420245975, 0.00025924984947778285, 0.00012282854004297405, 0.00025089248083531857, 0.00045209546806290746, 0.00016313034575432539, 0.00010202844714513049, 0.00025572034064680338, } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -32,-11,-21,-59,101,-3,22,-7,-11,-2,-12,-16,-26,-9,-8,-20,-31,-10,-64,-9,-9,36,-23,16,5,-22,-27,24,24,21,22,2,-71,6,-19,-45,-12,-83,-51,-18,-11,-20,62,-19,-25,21,-82,-55,-25,15,-9,57,-93,18,37,2,1,-11,-10,-13,-32,-14,-25,-38,-49,-33,-53,-55,-30,20,1,16,73,26,-2,-21,-19,64,127,-17,-108,23,-125,-29,-24,-21,-4,19,-33,-5,-26,-43,-4,8,-22,-16, -14,46,44,-73,-50,-7,127,-39,-2,-23,-39,-5,-45,-4,-85,87,-21,88,86,-33,3,127,52,127,31,4,37,121,127,40,127,-27,-127,-16,-110,-36,-33,-98,127,7,-44,-127,2,-38,67,-53,-72,-33,58,15,21,127,-103,85,-90,4,-76,5,-12,21,-28,-109,-127,-33,-65,-8,-7,-73,-26,36,-72,119,-127,1,25,-34,-127,-54,-11,-101,-127,7,-17,-70,127,67,-67,20,-127,-5,17,-10,7,108,-49,-101, -11,-3,-17,-29,44,-7,31,-14,-23,12,-7,10,7,-21,-2,-41,-23,-18,-15,-27,-18,10,52,23,-6,-23,13,16,12,-5,11,6,-37,5,-32,59,-11,-127,-42,17,-11,26,39,-19,-23,-53,-99,-55,-22,0,-2,38,21,-7,12,-7,67,-14,4,-39,-36,1,-50,10,-50,-40,127,-12,-25,27,-9,30,26,-2,18,15,-12,127,-56,-14,-92,9,-127,-33,17,-37,-7,-14,-34,-52,-22,60,2,12,-20,-12, 
  /* [0][1][][] */ -100,-1,28,-77,46,97,-58,-17,-7,-10,-29,9,-127,19,18,73,-27,34,65,20,35,-25,73,-49,52,15,55,19,-6,5,-20,-19,-114,-13,67,-17,-21,-111,-56,-127,-34,-15,95,-9,-66,127,-127,-105,66,65,15,-36,-127,56,81,-24,18,-38,17,-4,9,-3,69,-113,-54,10,-33,-61,-14,-14,-127,29,86,127,-1,-72,-97,-22,-67,-41,-19,2,-56,-69,47,27,-127,73,-53,127,115,-76,127,-4,-46,-25, 53,127,127,127,-127,-127,83,-65,127,127,-84,-91,-51,127,-29,100,127,-127,127,127,127,-114,109,-127,-127,-127,127,127,-106,127,-30,127,-29,127,118,-92,127,52,22,-17,127,24,-127,-76,127,-27,108,117,127,-127,127,-99,96,127,-127,127,-127,127,-127,127,-113,127,84,-127,127,127,-26,127,-124,-127,-26,-127,-3,107,127,46,-13,-106,84,-127,57,127,67,127,113,83,-64,127,-67,48,-28,-11,-80,-26,-127,-46, -127,-47,37,-93,11,60,-76,9,-38,-11,-4,127,-98,12,23,61,-33,50,101,2,-1,-37,77,-39,48,-2,34,2,-6,-21,-12,-16,-95,-26,78,127,-12,-80,-54,-88,-42,2,38,-7,-50,-88,-123,-127,38,65,-8,-23,113,33,99,-61,71,-39,32,-51,-13,-19,-108,-77,-75,-11,-62,-82,-25,-2,-112,12,36,-81,25,127,-74,-18,-57,6,-22,-9,-97,-98,9,39,-94,50,-35,-72,127,127,-31,-29,-54,-24, 
  /* [0][2][][] */ -42,-47,-37,-27,34,1,-40,37,-16,10,30,-12,45,-2,-9,-36,-14,-14,-127,-33,-23,-6,30,-36,8,17,-4,16,13,-21,-26,-6,-2,2,-13,-40,-11,0,-36,8,-31,15,13,30,12,-8,-60,-8,-36,9,-25,14,-17,-32,29,-18,24,-28,-1,-19,-6,15,-11,-12,-41,-28,113,14,29,23,-9,5,-9,3,0,-43,11,50,-37,-31,6,12,-74,-29,1,-3,27,-18,-4,3,-2,-18,-9,-31,-13,-12, -60,-73,-5,-98,-53,-3,45,127,-58,86,127,-25,-53,7,127,127,-16,-47,72,-42,-17,-47,127,40,25,13,19,3,4,-11,-97,-33,-12,-30,-127,-16,-101,-36,33,-63,-26,-94,-44,127,24,-37,-59,-23,24,0,-11,14,56,35,-54,-49,-52,-64,30,-61,127,31,86,-19,-93,-50,-24,-62,127,20,-46,31,5,-37,25,-17,-13,-60,-7,3,-36,-25,-81,-63,36,-127,24,5,-2,-4,70,7,11,-127,-97,127, -43,-4,-52,17,8,-3,-21,44,-24,7,15,71,34,-6,-5,-55,-16,6,-64,-41,-22,-5,33,-3,12,-4,-33,-10,-4,-25,-48,-6,-10,5,-14,-8,-20,-23,-51,9,-44,-20,-12,27,4,-20,-55,11,-38,-8,-14,8,-4,-28,20,-17,58,-21,13,-38,5,17,-19,16,-9,-34,-33,12,17,22,-42,3,-38,-55,9,14,6,51,87,-10,28,4,-35,-12,-3,6,24,-3,-2,-12,9,17,0,-35,-11,-16, 
};
const TfArray<96, float> quant17_scale = { 96, { 0.0038051146548241377, 0.014247539453208447, 0.0094207450747489929, 0.0052709914743900299, 0.008363727480173111, 0.021589016541838646, 0.004089022520929575, 0.010416014119982719, 0.017587626352906227, 0.0084858136251568794, 0.010197159834206104, 0.0065550492145121098, 0.0046196924522519112, 0.0079957954585552216, 0.013041486963629723, 0.0072960276156663895, 0.02174886129796505, 0.01933729276061058, 0.007836746983230114, 0.010410739108920097, 0.011272531934082508, 0.011814911849796772, 0.0059784050099551678, 0.0077865519560873508, 0.070715151727199554, 0.0067389155738055706, 0.011161012575030327, 0.0045993044041097164, 0.01568613201379776, 0.0079177822917699814, 0.0073459832929074764, 0.010786152444779873, 0.0034627208951860666, 0.017573293298482895, 0.0047886590473353863, 0.0086238868534564972, 0.01450294628739357, 0.0038062774110585451, 0.015535146929323673, 0.0055713360197842121, 0.019554942846298218, 0.0084955152124166489, 0.0097466493025422096, 0.01034920010715723, 0.0079738292843103409, 0.012487650848925114, 0.0038954068440943956, 0.0075827231630682945, 0.0090597132220864296, 0.016894882544875145, 0.0098701547831296921, 0.010550250299274921, 0.0066443379037082195, 0.0092114834114909172, 0.013422352261841297, 0.01115410216152668, 0.0095207374542951584, 0.015641678124666214, 0.018346624448895454, 0.010633365251123905, 0.011511335149407387, 0.017248213291168213, 0.0078681390732526779, 0.004948906134814024, 0.0089918375015258789, 0.015838325023651123, 0.006461484357714653, 0.0081334691494703293, 0.011594456620514393, 0.020869940519332886, 0.0042182765901088715, 0.013136477209627628, 0.02756599523127079, 0.0075340834446251392, 0.0054998020641505718, 0.009758886881172657, 0.0034084606450051069, 0.0085898786783218384, 0.007477188017219305, 0.005866228137165308, 0.0059751491062343121, 0.0096873873844742775, 0.0030138238798826933, 0.0087182819843292236, 0.0040094121359288692, 0.013644319958984852, 0.0071446392685174942, 0.0078469924628734589, 0.0048151672817766666, 0.011018118821084499, 0.0052202129736542702, 0.010662930086255074, 0.019214056432247162, 0.0069330395199358463, 0.0043362090364098549, 0.010868114419281483, } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 1754, 7998, 284, 866, 4451, 13163, -21, 2407, 12775, -447, 11982, 2966, 1606, 211, 3852, 339, 3285, 4346, -23, 5219, 689, 5295, -870, 1309, -3670, 912, 2412, 1028, 6636, 756, 3374, 2168, 1084, 13793, 4395, 3520, 2730, 1322, 4252, 2261, 11290, 1134, 1195, 1009, 1396, 6458, 5883, 6868, 1094, -760, 1690, 2914, 3089, -1872, 5555, 57, 1866, 11290, 1684, 1140, 2291, 11554, 2645, -106, 15609, 8211, 1496, 2570, 3566, 4676, 2131, 157, -3224, 4426, 1395, 1942, 239, 6548, 3729, 5180, 2641, 1556, 2506, 10791, -319, 4583, 5366, 1649, -496, 2434, 815, 6049, 2606, 1847, 2641, 5034, };
const TfArray<96, float> quant18_scale = { 96, { 0.00018108477524947375, 0.00010198161180596799, 0.00038110910099931061, 0.00039632443804293871, 0.00015983151388354599, 6.7213863076176494e-05, 0.00032352132257074118, 0.00013551440497394651, 7.2834307502489537e-05, 0.00025320390705019236, 7.5272873800713569e-05, 0.0001661067217355594, 0.00019406933279242367, 0.00033021980198100209, 0.00014637259300798178, 0.00018073375395033509, 0.00018162587366532534, 0.00015024686581455171, 0.00025544516392983496, 0.0001614538487046957, 0.00026921261451207101, 0.00014836950867902488, 0.00028935645241290331, 0.00021619292965624481, 0.00019708418403752148, 0.00027756823692470789, 0.00020530000620055944, 0.00029697251738980412, 0.00013034522999078035, 0.00036580435698851943, 0.00019166046695318073, 0.00021305098198354244, 0.0003788766625802964, 6.1682294472120702e-05, 0.00012332413461990654, 0.00018215799354948103, 0.0002109313354594633, 0.0003234432078897953, 0.00012874366075266153, 0.00019619670638348907, 8.2664890214800835e-05, 0.00021928710339125246, 0.0003182303044013679, 0.00019320166029501706, 0.00025910991826094687, 0.00014053139602765441, 0.00012875115498900414, 0.00011984557204414159, 0.000237431944697164, 0.00031427049543708563, 0.00026154817896895111, 0.00024303855025209486, 0.00017834914615377784, 0.00021704091341234744, 0.0001328908110735938, 0.00031320282141678035, 0.00014875171473249793, 8.2338519860059023e-05, 0.00014295481378212571, 0.00023131105990614742, 0.00020858617790509015, 7.8875054896343499e-05, 0.00024083198513835669, 0.0004369211383163929, 6.1762453697156161e-05, 0.00010852394188987091, 0.00027220381889492273, 0.00022734198137186468, 0.00020604614110197872, 0.0001268827763851732, 0.00021541620662901551, 0.00016440007311757654, 0.0001848410174716264, 0.00015524766058661044, 0.00027483454323373735, 0.0002887575828935951, 0.00028239979292266071, 0.00012308885925449431, 0.00017977219249587506, 0.00016072763537522405, 0.00016521271027158946, 0.00013471175043378025, 0.00018459327111486346, 8.0109777627512813e-05, 0.00019356324628461152, 0.0001562217075843364, 0.00013782878522761166, 0.00026859078207053244, 0.00023691043315920979, 0.00024701314396224916, 0.00029363331850618124, 0.0001299956493312493, 0.00018823935533873737, 0.00019903863721992821, 0.00020660796144511551, 0.00014271150575950742, } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 20,10,-11,83,-127,-38,113,73,60,98,-11,51,24,27,35,101, 
  /* [1][0][][] */ -21,33,-72,-13,127,125,10,-5,-35,19,-79,23,-41,115,-79,-41, 
  /* [2][0][][] */ -56,83,64,15,77,93,5,49,31,-1,57,-20,50,-127,-17,17, 
  /* [3][0][][] */ 127,-35,9,0,24,42,-10,13,46,21,-47,-18,-39,38,-37,54, 
  /* [4][0][][] */ -74,-3,-2,36,-106,11,-61,-40,-21,26,-18,-77,-11,36,-18,127, 
  /* [5][0][][] */ -98,19,43,13,127,46,31,-9,-74,38,-47,-7,-76,61,-97,-26, 
  /* [6][0][][] */ -127,10,-28,10,-4,-60,71,25,18,-27,-65,40,15,1,-39,5, 
  /* [7][0][][] */ -5,115,110,-103,115,35,127,3,28,53,-42,36,78,64,-76,1, 
  /* [8][0][][] */ -47,-20,-86,68,-58,82,-71,-48,42,-31,127,49,119,48,-120,15, 
  /* [9][0][][] */ -9,-127,-8,75,-35,-55,-27,51,60,52,13,75,-69,13,-2,-43, 
  /* [10][0][][] */ -22,-42,-127,88,-122,122,39,-60,33,-84,92,-23,15,119,-77,75, 
  /* [11][0][][] */ -91,-97,-56,36,13,86,55,24,4,26,30,-127,-10,98,-111,91, 
  /* [12][0][][] */ -57,-87,-95,103,-105,-127,38,81,80,65,-15,118,0,-55,-47,-13, 
  /* [13][0][][] */ -56,-12,-28,5,1,5,27,11,-15,127,-11,-20,32,43,1,-17, 
  /* [14][0][][] */ -114,-34,-58,-44,-17,83,-29,-97,127,-54,78,-3,82,-62,-83,-101, 
  /* [15][0][][] */ 1,-127,92,-39,-56,-39,-11,62,10,-44,-87,-41,79,-43,-33,-58, 
  /* [16][0][][] */ -24,-17,31,-43,29,4,-42,-14,83,-127,75,-18,-38,-5,-93,-113, 
  /* [17][0][][] */ -19,11,27,-52,14,1,-21,-4,61,-56,23,31,110,-83,-13,-127, 
  /* [18][0][][] */ 56,20,-33,-120,12,-19,116,-47,21,73,-8,61,-25,64,-16,-127, 
  /* [19][0][][] */ -66,-28,-37,-55,-100,22,-21,10,36,-38,46,-127,-28,-4,-36,-4, 
  /* [20][0][][] */ 5,79,55,-84,79,1,-46,87,-113,-108,40,-74,-33,127,-35,15, 
  /* [21][0][][] */ 18,-87,-126,-19,77,45,60,74,-65,-81,0,19,86,-127,-20,18, 
  /* [22][0][][] */ 69,-44,87,-26,-18,16,65,36,32,116,25,39,7,-16,127,-14, 
  /* [23][0][][] */ -110,-67,-15,46,58,50,1,18,22,-8,2,-87,0,51,59,127, 
  /* [24][0][][] */ 22,4,28,34,17,-93,0,-79,21,127,-111,75,-36,-55,57,-56, 
  /* [25][0][][] */ 127,-46,96,127,49,2,3,25,-107,60,58,-67,13,36,98,-7, 
  /* [26][0][][] */ -14,23,8,41,-57,120,-20,36,-65,-33,-88,32,5,18,57,-127, 
  /* [27][0][][] */ 41,-8,-7,-41,-49,10,-82,-3,-114,-17,-73,-43,-75,50,-21,127, 
  /* [28][0][][] */ -80,16,22,-17,29,3,-127,1,4,-38,-7,-34,31,-57,-95,-49, 
  /* [29][0][][] */ -25,-90,-30,83,-43,0,127,9,57,36,-82,46,38,-19,-25,85, 
  /* [30][0][][] */ 61,-54,-54,-1,-127,28,51,-54,18,-8,-5,-15,4,30,16,82, 
  /* [31][0][][] */ -127,-10,-7,87,-45,3,-48,4,-37,-53,18,-34,-21,-56,-27,73, 
  /* [32][0][][] */ -127,-71,-83,-23,-102,-42,16,-14,117,50,-40,-46,46,44,29,-19, 
  /* [33][0][][] */ -24,26,-124,69,-127,-105,40,13,-105,21,-36,-45,-44,114,81,90, 
  /* [34][0][][] */ 48,69,7,35,-85,-56,49,4,15,-127,-38,21,2,-5,80,109, 
  /* [35][0][][] */ 37,-9,-82,-40,-127,1,90,-27,32,69,-7,-27,27,64,25,79, 
  /* [36][0][][] */ -6,-1,-49,48,127,-4,42,34,-86,34,-80,-69,29,-11,1,26, 
  /* [37][0][][] */ -127,67,-28,-62,55,-82,-44,-30,-11,-23,-5,50,51,-77,21,-112, 
  /* [38][0][][] */ 69,67,61,-95,-77,-51,-127,-78,-2,-100,26,72,-26,-122,73,-34, 
  /* [39][0][][] */ -7,-34,-17,60,-7,43,61,-24,-25,13,16,-27,-18,75,41,127, 
  /* [40][0][][] */ 127,6,107,85,-42,-55,-27,-8,-54,54,-39,-23,-29,-61,120,-39, 
  /* [41][0][][] */ -34,1,1,49,-97,127,7,65,-62,33,-114,14,13,42,54,-122, 
  /* [42][0][][] */ -28,-70,27,-10,127,42,74,41,-26,-68,-55,-6,-21,26,-31,22, 
  /* [43][0][][] */ -45,-95,-15,-14,127,27,-10,57,-59,-18,-123,-57,71,18,-65,32, 
  /* [44][0][][] */ -23,-51,-83,-112,16,78,93,-3,-44,-127,-57,36,-26,44,57,113, 
  /* [45][0][][] */ 7,-60,-54,-6,-127,49,-32,-55,49,-41,33,-40,2,8,-30,37, 
  /* [46][0][][] */ 1,-62,-40,9,95,-82,13,127,-14,-35,57,74,-39,-33,78,-117, 
  /* [47][0][][] */ -45,-45,-1,44,33,41,53,5,-20,127,32,85,1,98,12,113, 
  /* [48][0][][] */ 48,-18,-87,-88,39,-67,7,62,49,-82,1,26,-59,4,-32,-127, 
  /* [49][0][][] */ 38,21,19,35,-10,-35,39,58,-29,127,-28,47,-34,-11,49,82, 
  /* [50][0][][] */ 7,-3,14,6,-127,-21,-10,-50,51,16,14,51,-16,-64,21,7, 
  /* [51][0][][] */ 17,13,-17,-127,-28,82,36,-63,15,8,42,-41,69,37,13,0, 
  /* [52][0][][] */ 12,-22,12,-100,121,-124,-1,-41,47,17,127,-73,40,19,-66,103, 
  /* [53][0][][] */ -38,-75,46,-31,-40,-121,32,-127,-6,93,-120,85,-31,-18,25,-75, 
  /* [54][0][][] */ 77,69,45,-48,-122,-24,-106,-127,6,32,38,88,-85,-68,48,14, 
  /* [55][0][][] */ 8,11,-35,68,-17,25,45,-21,-4,127,7,53,10,16,-2,50, 
  /* [56][0][][] */ 33,-83,-126,106,-62,84,15,75,78,51,81,68,-40,-4,59,127, 
  /* [57][0][][] */ 36,20,60,-70,76,14,-17,-9,67,-43,21,123,49,-36,127,-33, 
  /* [58][0][][] */ 97,-97,43,-94,47,26,4,127,55,92,-33,46,82,20,112,-11, 
  /* [59][0][][] */ -53,23,19,-20,-3,-91,-19,29,21,8,-81,-77,-127,-58,55,-9, 
  /* [60][0][][] */ 32,-60,44,13,16,-20,1,-43,37,127,-21,68,-15,-22,-40,-51, 
  /* [61][0][][] */ 22,49,8,-5,-69,-127,1,-53,-93,-11,-38,-39,-51,-40,94,68, 
  /* [62][0][][] */ -9,93,-46,39,-60,127,-28,19,-68,-9,-40,27,-16,45,51,-69, 
  /* [63][0][][] */ 23,-3,-56,-127,-14,-32,72,-8,-1,-79,-27,35,-34,68,35,-33, 
  /* [64][0][][] */ -39,25,-5,-14,63,-53,28,78,-127,-10,-68,-16,-21,103,54,69, 
  /* [65][0][][] */ -74,-14,-48,-29,41,28,-57,-43,-116,-71,18,-53,-127,68,-56,41, 
  /* [66][0][][] */ -5,45,4,40,-46,127,-21,16,-49,-1,-40,47,-32,41,47,-99, 
  /* [67][0][][] */ 43,-27,-23,-19,0,-94,56,-92,-11,30,2,107,-71,-41,-20,-127, 
  /* [68][0][][] */ 7,-127,-9,51,6,-1,30,67,58,55,42,16,-69,43,-28,-31, 
  /* [69][0][][] */ 2,68,94,-103,60,35,-9,73,19,76,51,56,97,-85,30,-127, 
  /* [70][0][][] */ 53,34,19,-18,84,16,-115,-51,-123,-93,10,45,-41,53,-127,-24, 
  /* [71][0][][] */ -24,-98,53,-69,96,-16,27,28,-76,107,-127,-35,-1,107,-58,37, 
  /* [72][0][][] */ 34,27,71,24,-68,-26,-124,-67,-16,69,-35,57,-12,96,-127,-1, 
  /* [73][0][][] */ 14,-63,-10,-52,57,-116,22,-56,97,101,115,-10,36,-30,-107,127, 
  /* [74][0][][] */ 4,13,-27,83,-78,-2,98,21,64,56,26,115,127,40,-54,13, 
  /* [75][0][][] */ -25,30,-16,24,-42,127,-9,13,-25,23,-43,29,-4,54,29,-54, 
  /* [76][0][][] */ -95,72,-67,44,-119,-9,-8,46,64,31,-35,-39,54,-60,-127,43, 
  /* [77][0][][] */ 95,127,-98,76,87,89,89,16,41,29,85,-27,101,32,61,10, 
  /* [78][0][][] */ 21,-32,3,-70,53,-99,46,-60,39,35,109,-31,18,-24,-27,127, 
  /* [79][0][][] */ -48,66,5,25,-4,-41,-38,-4,-127,-2,62,12,102,46,-77,-47, 
  /* [80][0][][] */ -114,21,48,-11,118,67,-23,-127,-74,98,-52,-11,-19,-65,7,45, 
  /* [81][0][][] */ 71,89,-26,7,36,-31,82,104,-109,127,-56,-48,-51,36,100,120, 
  /* [82][0][][] */ 77,104,-34,-49,-25,-37,102,-90,4,1,-68,69,127,-6,58,-42, 
  /* [83][0][][] */ 1,-28,24,23,-5,12,-35,-85,92,-44,111,27,26,-62,-57,-127, 
  /* [84][0][][] */ -127,-63,-25,-12,-14,73,96,9,66,52,105,80,48,91,-65,12, 
  /* [85][0][][] */ 127,5,57,-74,65,-11,-25,67,47,84,-46,13,-25,20,103,16, 
  /* [86][0][][] */ -108,74,-25,-1,18,82,40,16,80,37,127,-45,-39,65,-13,-18, 
  /* [87][0][][] */ 14,-52,17,-41,34,-127,29,-32,42,-14,66,-38,35,-46,-29,69, 
  /* [88][0][][] */ -98,61,42,-18,120,-27,45,13,-60,-62,89,-71,60,127,93,-115, 
  /* [89][0][][] */ -25,43,-9,28,-34,127,-5,21,-49,9,-48,13,-14,54,23,-80, 
  /* [90][0][][] */ 64,-61,16,31,127,9,52,14,-14,-87,-122,-14,-5,-3,-51,33, 
  /* [91][0][][] */ 6,35,-6,-31,-7,-101,-101,19,-51,4,-81,-127,-103,-81,-18,22, 
  /* [92][0][][] */ 53,69,50,48,-127,-71,26,1,-32,38,-19,-12,-40,-73,23,1, 
  /* [93][0][][] */ 0,-127,-106,68,-21,-38,-30,66,78,85,5,44,-33,47,-13,-44, 
  /* [94][0][][] */ 102,7,112,-28,31,-33,15,52,39,85,6,69,22,10,127,-18, 
  /* [95][0][][] */ -68,-36,-16,-29,127,-3,62,62,-49,-8,-115,-63,23,15,-58,36, 
};
const TfArray<96, float> quant19_scale = { 96, { 0.0025873503182083368, 0.001457119476981461, 0.0054453099146485329, 0.0056627076119184494, 0.0022836823482066393, 0.00096035579917952418, 0.0046224924735724926, 0.0019362380262464285, 0.001040661009028554, 0.0036177926231175661, 0.0010755034163594246, 0.0023733428679406643, 0.0027728744316846132, 0.0047182007692754269, 0.0020913805346935987, 0.0025823349133133888, 0.0025950814597308636, 0.0021467362530529499, 0.0036498161498457193, 0.0023068625014275312, 0.0038465263787657022, 0.0021199125330895185, 0.0041343425400555134, 0.0030889776535332203, 0.002815950894728303, 0.0039659119211137295, 0.0029333389829844236, 0.004243161529302597, 0.0018623805372044444, 0.0052266349084675312, 0.0027384564746171236, 0.003044085344299674, 0.00541341258212924, 0.0008813203894533217, 0.0017620626604184508, 0.0026026845443993807, 0.0030137996654957533, 0.0046213762834668159, 0.0018394972430542111, 0.0028032704722136259, 0.0011811209842562675, 0.0031331875361502171, 0.0045468937605619431, 0.0027604771312326193, 0.003702178131788969, 0.0020079212263226509, 0.0018396043451502919, 0.0017123607685789466, 0.0033924421295523643, 0.0044903159141540527, 0.0037370163481682539, 0.0034725496079772711, 0.0025482634082436562, 0.0031010936945676804, 0.00189875194337219, 0.0044750608503818512, 0.0021253735758364201, 0.001176457735709846, 0.0020425471011549234, 0.0033049865160137415, 0.0029802920762449503, 0.0011269715614616871, 0.0034410220105201006, 0.006242755800485611, 0.00088246568338945508, 0.0015505966730415821, 0.0038892647717148066, 0.0032482759561389685, 0.002943999832496047, 0.0018129089148715138, 0.0030778797809034586, 0.0023489582818001509, 0.002641019644215703, 0.0022181880194693804, 0.0039268527179956436, 0.0041257860139012337, 0.0040349452756345272, 0.0017587011680006981, 0.0025685960426926613, 0.0022964861709624529, 0.0023605693131685257, 0.0019247696036472917, 0.0026374799199402332, 0.0011446133721619844, 0.002765643410384655, 0.0022321052383631468, 0.001969306031242013, 0.0038376415614038706, 0.0033849906176328659, 0.0035293388646095991, 0.0041954508051276207, 0.0018573857378214598, 0.0026895753107964993, 0.0028438761364668608, 0.0029520271345973015, 0.0020390707068145275, } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { -2558, 9372, -17837, -1169, 13070, -14797, -34949, -8761, -5771, 9328, -16455, -11914, 8480, -8870, -2637, -1574, };
const TfArray<16, float> quant20_scale = { 16, { 0.00014290580293163657, 0.0001179190949187614, 0.000135422422317788, 0.00012666569091379642, 0.00010148341971216723, 0.00016708287876099348, 9.1761416115332395e-05, 0.00016181659884750843, 0.00010627557639963925, 9.8146541859023273e-05, 0.00015619028999935836, 0.0001468657428631559, 0.0001181925181299448, 8.6323678260669112e-05, 0.00013834345736540854, 0.00016007130034267902, } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 38,35,20,-24,58,61,-35,49,-5,108,-8,49,-30,30,-16,52,43,76,46,-62,-75,83,-7,47,66,44,37,49,-39,-52,-12,77,-21,11,-65,42,59,-127,-42,4,14,-40,57,1,-18,-65,-71,-20, 
  /* [1][0][][] */ -54,4,-77,-30,7,82,-48,11,-13,-26,-41,40,64,-19,-27,-20,-18,-34,-5,27,-65,46,-108,-51,-52,-33,48,63,-22,-26,43,-44,6,-64,-31,48,21,-57,127,-46,-25,31,-37,-20,33,47,29,10, 
  /* [2][0][][] */ 4,0,52,-30,-14,-81,25,25,96,80,-68,13,106,-52,127,93,-70,-28,-29,32,85,-83,-39,-89,18,-37,40,-71,33,48,-43,8,32,-24,57,39,-62,2,-3,-20,34,29,46,-17,15,-96,92,-61, 
  /* [3][0][][] */ 47,4,-24,-19,30,107,16,-16,42,-52,32,-21,-44,15,9,38,-32,-58,45,-123,-3,-5,-21,-12,-32,83,127,62,-7,-44,33,44,60,-28,96,34,-44,-51,11,34,26,21,-14,4,27,27,-5,-21, 
  /* [4][0][][] */ 102,-12,7,-50,93,87,58,12,72,-22,-100,36,54,-23,34,-12,-92,-114,-39,-103,-21,17,-39,-52,-91,113,-115,127,-62,-49,36,74,43,-44,4,-37,-3,18,-32,12,-50,-10,-12,48,-43,114,-33,-67, 
  /* [5][0][][] */ -4,-6,-61,14,-22,54,23,-33,63,53,38,95,55,-24,36,0,-40,127,-14,38,7,-2,-64,-23,37,-2,-63,-46,-20,19,15,-22,-31,0,40,12,-43,-1,-94,-12,92,-20,35,38,-23,9,-40,27, 
  /* [6][0][][] */ 44,18,-2,51,1,-23,84,-43,-9,62,127,91,32,45,-59,44,27,-49,-83,83,58,-75,-36,73,-98,74,86,1,112,53,-21,-4,86,-44,-98,-11,74,28,6,2,1,54,49,-36,63,123,35,-7, 
  /* [7][0][][] */ -89,-11,-23,31,-68,-57,33,40,87,118,-56,-74,-93,15,-6,-11,-73,95,-3,120,-47,39,19,26,-20,-99,-37,-90,32,41,-12,8,-16,20,8,-24,0,-60,127,-2,9,48,29,-14,59,75,-36,-11, 
  /* [8][0][][] */ -19,-77,59,-63,53,-68,60,-36,-31,-103,24,12,-36,-5,23,23,-2,4,-48,108,6,32,-17,23,61,0,-57,-30,-127,-17,-66,-108,5,-53,4,82,-4,29,113,19,11,0,69,100,-9,-61,-41,77, 
  /* [9][0][][] */ 28,-45,24,-57,54,92,-26,52,11,-47,-35,-8,36,-56,127,-2,20,-123,28,31,-69,28,54,-48,-31,-87,-31,81,50,86,-30,-24,-62,36,-12,121,-21,-50,-59,-40,-27,7,16,119,74,96,-75,2, 
  /* [10][0][][] */ -14,23,-18,-12,18,25,-72,-45,55,41,61,-4,-40,-20,45,-51,-66,127,1,60,-3,-4,17,27,-43,50,7,94,40,8,-38,-12,77,-4,-6,28,-3,-46,-41,33,-90,1,35,-23,15,43,20,39, 
  /* [11][0][][] */ -29,43,-18,38,33,62,4,5,24,14,-127,-72,75,20,-6,-36,3,29,-49,-48,-16,-6,104,6,51,13,-17,24,-13,22,-11,53,29,-9,-48,-8,39,76,96,19,45,-37,61,4,-62,-25,76,-3, 
  /* [12][0][][] */ -71,3,24,17,-74,-62,5,5,-43,-31,-127,18,71,-104,25,25,42,98,84,-113,-30,38,-41,-95,-20,-18,27,-30,12,17,-20,61,66,73,39,-40,-51,-26,28,-18,-42,24,64,-14,28,-5,-40,-47, 
  /* [13][0][][] */ -47,-106,-51,-97,13,27,54,22,-116,34,122,-59,55,49,127,12,116,8,-17,-86,80,-94,112,-6,-85,-13,-25,14,-45,-95,-100,13,35,-22,-77,66,35,-67,77,-100,-16,42,68,32,71,-32,110,-68, 
  /* [14][0][][] */ 47,9,-50,12,-42,7,-69,-36,-38,53,41,48,-8,-57,8,-39,50,-100,19,-5,75,-49,21,2,-5,127,-85,3,-50,-31,-88,8,118,30,83,-27,-69,14,-20,54,-18,-43,95,-19,-50,-42,-53,44, 
  /* [15][0][][] */ -58,14,36,22,89,3,3,33,26,72,-17,55,52,-12,-35,-17,12,38,3,-41,29,-39,-48,-48,53,-66,-41,69,-25,9,17,4,-60,4,127,-12,-91,18,56,-17,-57,-24,13,-2,-33,-31,-17,6, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0060734967701137066, 0.0050115613266825676, 0.0057554529048502445, 0.0053832917474210262, 0.0043130451813340187, 0.0071010221727192402, 0.0038998599629849195, 0.0068772053346037865, 0.0045167119242250919, 0.0041712280362844467, 0.0066380873322486877, 0.0062417942099273205, 0.0050231819041073322, 0.0036687562242150307, 0.0058795968070626259, 0.0068030301481485367, } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 13750, 2473, 16325, 899, 16627, -327, 36730, 1319, 10015, 46286, 6057, 30628, 1134, 10134, 39019, 26291, 2692, 2215, 4312, 47445, 1229, 17104, 4048, 17605, 16604, 39234, 3156, -164, -3269, 13838, 22399, 705, 2078, 999, 4360, 16537, 6619, 33346, 2382, 21663, 20171, -932, 937, 15950, -1973, 2245, 37288, 27489, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 7.8946170106064528e-05, 5.4572719818679616e-05, 6.561725604115054e-05, 8.1830985436681658e-05, 9.9573968327604234e-05, 7.9042925790417939e-05, 4.3284388084430248e-05, 0.00014290207764133811, 7.8754033893346786e-05, 3.9479185943491757e-05, 6.2480838096234947e-05, 5.9959846112178639e-05, 5.6000273616518825e-05, 0.0001003718571155332, 3.9785580156603828e-05, 7.2043250838760287e-05, 6.1371312767732888e-05, 5.0229042244609445e-05, 0.00022585078841075301, 4.5804717956343666e-05, 6.4727588323876262e-05, 7.2268638177774847e-05, 7.1323083830066025e-05, 0.00010744432074716315, 6.4995256252586842e-05, 5.827918357681483e-05, 5.5680793593637645e-05, 4.6234683395596221e-05, 0.0002832490426953882, 8.7277781858574599e-05, 8.6609470599796623e-05, 0.00031987807597033679, 8.5495157691184431e-05, 0.00018069824727717787, 6.8521432694979012e-05, 8.1060956290457398e-05, 8.6615633335895836e-05, 5.1191778766224161e-05, 8.1563470303080976e-05, 8.0267171142622828e-05, 7.8071519965305924e-05, 0.00017921315156854689, 0.00032508658478036523, 5.9674122894648463e-05, 0.00014518489479087293, 5.9865717048523948e-05, 6.1859798734076321e-05, 6.377549289027229e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -87,71,-127,109,-106,99,-38,127,-92,-42,56,-54,87,-54,-52,-68,85,93,92,-108,90,-127,75,-103,-94,-58,86,96,-92,-21,-104,101,109,-94,67,-78,-81,-126,96,-60,-16,-72,116,-119,108,79,-81,-19, -127,89,-75,127,-78,127,-27,115,-118,-94,92,-88,127,-123,-61,-78,105,127,127,-121,96,-93,103,-122,-94,-96,107,127,31,-54,-127,61,127,-127,92,-106,-105,-123,116,-72,-70,127,98,-122,-25,115,-96,-47, -61,52,-6,39,-35,69,-11,-10,-77,-30,24,-53,67,-65,-36,-6,46,72,73,-7,7,-64,53,-46,-72,-38,75,52,111,-17,-72,-14,59,-83,51,-26,-23,-30,51,-81,-127,-31,69,-86,-62,80,-22,-48, 
  /* [0][1][][] */ -105,111,-63,101,-74,120,-117,117,-107,-83,82,-80,93,-80,-96,-106,115,88,-48,-120,116,-112,97,-83,-118,-81,118,117,-127,-80,-92,127,96,20,97,-95,-98,-120,111,-127,-95,-90,111,-127,127,80,-127,-91, -109,127,-84,115,-127,112,-127,90,-127,-127,127,-127,122,-127,-127,-127,127,126,-46,-127,127,-110,127,-127,-113,-127,127,113,12,-127,-126,72,125,27,127,-127,-127,-127,127,-123,-84,116,127,-121,-42,127,-127,-127, -95,82,-60,44,-57,51,-63,30,-65,-26,48,-79,84,-68,-74,-48,62,79,-44,-22,16,-40,56,-56,-127,-59,60,60,114,-43,-67,31,36,12,54,-53,-29,-17,59,-96,-34,-66,73,-97,-96,101,-36,-112, 
  /* [0][2][][] */ -44,41,-2,44,-39,56,-53,21,-45,-43,24,-62,100,-73,-16,-72,70,44,-94,-35,38,-10,14,-32,-46,-35,27,30,-73,-64,-43,13,40,54,52,-77,-34,-45,37,-58,-100,-31,56,-82,75,47,-66,-76, -72,44,-51,72,-52,47,-63,0,-66,-53,42,-89,103,-83,-20,-59,80,53,-109,-33,26,-11,27,-34,-28,-55,21,63,7,-105,-67,35,31,70,63,-76,-26,-51,41,-54,-27,81,46,-99,-14,43,-51,-79, -44,35,-61,22,-55,28,-25,13,-20,-11,25,-61,80,-57,-8,-11,34,36,-86,1,2,8,-15,-4,-47,-18,19,28,71,-46,-9,-5,10,45,14,-38,10,0,16,-17,6,-30,24,-35,-45,62,-8,-70, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0033552122768014669, 0.0023193405941128731, 0.0027887332253158092, 0.0034778167027980089, 0.0042318934574723244, 0.0033593242987990379, 0.0018395865336060524, 0.006073338445276022, 0.0033470464404672384, 0.0016778653953224421, 0.002655435586348176, 0.0025482934433966875, 0.0023800116032361984, 0.0042658038437366486, 0.0016908871475607157, 0.0030618379823863506, 0.0026082808617502451, 0.0021347342990338802, 0.0095986584201455116, 0.0019467005040496588, 0.0027509224601089954, 0.0030714171007275581, 0.0030312309972941875, 0.0045663835480809212, 0.0027622983325272799, 0.0024768651928752661, 0.0023664336185902357, 0.0019649739842861891, 0.012038084678351879, 0.003709305776283145, 0.0036809023004025221, 0.01359481830149889, 0.0036335440818220377, 0.0076796752400696278, 0.0029121607076376677, 0.003445090726017952, 0.0036811644677072763, 0.0021756505593657494, 0.0034664473496377468, 0.0034113547299057245, 0.0033180394675582647, 0.0076165590435266495, 0.01381617970764637, 0.0025361501611769199, 0.0061703580431640148, 0.0025442929472774267, 0.002629041438922286, 0.0027104583568871021, } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 1697, -620, 489, -1061, 3102, -710, 2249, -2146, 607, 432, 1233, 2504, 277, -512, 322, 3355, -849, 2663, 5262, 548, -466, 2242, -391, 3042, 1721, 1608, 675, -672, 5613, -244, 1526, -1941, -406, 1864, -650, 1148, 1098, 903, 315, 3133, 1332, 4814, -2606, 1296, 4194, 29, 2119, 2234, };
const TfArray<48, float> quant24_scale = { 48, { 0.00027061675791628659, 0.00056135223712772131, 0.00038287480128929019, 0.00036354336771182716, 0.00026118409004993737, 0.00028945496887899935, 0.00031402902095578611, 0.00024582658079452813, 0.00041358379530720413, 0.00030771986348554492, 0.00033783679828047752, 0.00030153692932799459, 0.00045371605665422976, 0.0003973869897890836, 0.00034613165189512074, 0.0002312071155756712, 0.00044281504233367741, 0.00030979758594185114, 0.00018286053091287613, 0.00039144640322774649, 0.00036366909625940025, 0.00025116666802205145, 0.00034921153564937413, 0.00027414705255068839, 0.00026349513791501522, 0.00028784209280274808, 0.00040294104837812483, 0.00040747050661593676, 0.00016489023983012885, 0.00042938650585711002, 0.00031346254399977624, 0.00019326881738379598, 0.0002634987176861614, 0.00041866779793053865, 0.00033980092848651111, 0.00049488723743706942, 0.00036236734013073146, 0.00034301442792639136, 0.00026794907171279192, 0.00024586435756646097, 0.00039952274528332055, 0.00018602708587422967, 0.00019341259030625224, 0.00030436165980063379, 0.00020705633505713195, 0.0003815807867795229, 0.00027929202769882977, 0.00030016273376531899, } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 64,31,127,-38,69,102,-78,-51, 
  /* [1][0][][] */ 2,-88,-127,2,68,29,25,-1, 
  /* [2][0][][] */ -127,5,-51,-22,44,28,-82,-32, 
  /* [3][0][][] */ 41,65,127,-78,-26,-108,-1,-30, 
  /* [4][0][][] */ -127,14,-50,-21,47,19,-50,-67, 
  /* [5][0][][] */ -86,31,-60,-4,8,34,-82,-127, 
  /* [6][0][][] */ -25,-127,-104,41,103,15,10,42, 
  /* [7][0][][] */ -77,-127,-124,-84,-70,-75,5,101, 
  /* [8][0][][] */ 84,31,-6,-2,103,-70,-127,16, 
  /* [9][0][][] */ -40,51,-60,97,-60,-33,127,-28, 
  /* [10][0][][] */ -21,109,47,64,127,-15,-11,58, 
  /* [11][0][][] */ -77,-32,-27,-9,-83,102,127,-4, 
  /* [12][0][][] */ 68,42,-127,30,-7,-40,-66,-13, 
  /* [13][0][][] */ 60,-26,-54,10,12,-127,-32,-36, 
  /* [14][0][][] */ 8,-80,73,36,127,-89,-52,25, 
  /* [15][0][][] */ -28,-37,1,127,59,77,-79,23, 
  /* [16][0][][] */ 113,19,-31,22,75,-101,-127,-21, 
  /* [17][0][][] */ 58,127,62,89,49,70,34,-101, 
  /* [18][0][][] */ 42,-19,-1,5,127,-19,34,-16, 
  /* [19][0][][] */ 10,127,24,18,-105,17,26,-28, 
  /* [20][0][][] */ -47,14,56,-127,20,28,-15,108, 
  /* [21][0][][] */ -46,61,60,-127,48,48,-2,118, 
  /* [22][0][][] */ -60,-57,-77,12,-127,95,95,-21, 
  /* [23][0][][] */ 92,38,-127,11,24,-45,-67,-12, 
  /* [24][0][][] */ -64,42,6,4,-14,92,-127,111, 
  /* [25][0][][] */ -100,-57,-127,3,-66,-73,67,101, 
  /* [26][0][][] */ 39,-13,-35,-33,127,-11,124,-34, 
  /* [27][0][][] */ 127,-62,26,97,-2,25,-25,93, 
  /* [28][0][][] */ 66,52,50,-16,127,-66,67,-39, 
  /* [29][0][][] */ -18,-12,-34,-43,-70,20,127,-31, 
  /* [30][0][][] */ 44,-127,-40,-68,-107,2,12,-54, 
  /* [31][0][][] */ 10,30,-11,-6,-127,7,-25,-6, 
  /* [32][0][][] */ 48,-59,-51,71,-13,-90,107,-127, 
  /* [33][0][][] */ 51,127,41,48,53,-9,-38,-13, 
  /* [34][0][][] */ -127,-31,126,-1,-21,111,101,16, 
  /* [35][0][][] */ -34,69,127,-6,-64,-62,-34,20, 
  /* [36][0][][] */ -89,6,109,-20,-25,127,77,33, 
  /* [37][0][][] */ -15,-84,-10,-127,-47,-92,73,46, 
  /* [38][0][][] */ 48,-7,87,-57,44,57,-127,11, 
  /* [39][0][][] */ -12,94,-127,-58,-25,-4,12,77, 
  /* [40][0][][] */ 62,-51,16,38,1,6,8,127, 
  /* [41][0][][] */ -19,104,127,-22,0,41,-70,55, 
  /* [42][0][][] */ 76,-117,-127,-29,-127,-13,18,-107, 
  /* [43][0][][] */ -7,-90,32,-59,127,-40,24,31, 
  /* [44][0][][] */ -7,124,127,12,7,57,-85,0, 
  /* [45][0][][] */ -38,45,10,72,-101,49,-127,21, 
  /* [46][0][][] */ -36,-30,53,52,-127,-116,-30,-9, 
  /* [47][0][][] */ -32,75,28,-117,-127,24,-13,53, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0022281031124293804, 0.0046218521893024445, 0.0031523716170340776, 0.0029932076577097178, 0.002150439890101552, 0.0023832062724977732, 0.0025855349376797676, 0.0020239951554685831, 0.0034052117262035608, 0.0025335887912660837, 0.0027815543580800295, 0.0024826822336763144, 0.0037356377579271793, 0.0032718565780669451, 0.0028498494066298008, 0.0019036268349736929, 0.0036458850372582674, 0.0025506955571472645, 0.0015055687399581075, 0.0032229451462626457, 0.0029942428227514029, 0.0020679621957242489, 0.002875207457691431, 0.0022571696899831295, 0.0021694677416235209, 0.0023699267767369747, 0.0033175854478031397, 0.0033548783976584673, 0.0013576116180047393, 0.0035353221464902163, 0.0025808708742260933, 0.0015912646194919944, 0.0021694973111152649, 0.0034470704849809408, 0.0027977258432656527, 0.0040746177546679974, 0.0029835249297320843, 0.0028241840191185474, 0.0022061390336602926, 0.002024305984377861, 0.0032894411124289036, 0.001531640300527215, 0.0015924483304843307, 0.0025059392210096121, 0.0017047830624505877, 0.0031417172867804766, 0.0022995304316282272, 0.0024713678285479546, } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { 4435, -585, 22047, -5891, 3302, -15701, 1617, -11535, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 9.3657603429164737e-05, 0.00010165079584112391, 0.00014783174265176058, 0.00010323288006475195, 0.00012416159734129906, 0.00013979505456518382, 7.5581949204206467e-05, 0.00011721390910679474, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -47,-58,-25,-82,12,-20,101,101,-107,-84,-46,4,-74,-9,-57,31,-113,7,10,127,77,-19,15,111,77,84,25,13,-107,-68,-98,-61,-51,111,34,-52,33,-44,100,12,44,6,-7,-115,22,-37,-40,-99, 
  /* [1][0][][] */ -11,55,-23,-27,-69,47,-18,-49,-33,62,-16,17,51,45,-42,-13,-7,-127,75,-46,118,17,-60,18,49,5,-71,62,36,-3,64,32,-29,-26,5,-10,7,118,-4,-35,56,31,-20,23,102,16,-24,54, 
  /* [2][0][][] */ -22,-28,117,10,98,-49,-8,31,-25,10,-13,46,14,-35,-41,-127,-49,-105,-32,18,-109,22,-33,-35,-49,18,-4,-50,-41,12,-36,-14,-1,-7,28,-2,29,-32,-42,12,33,-37,33,-47,-37,-49,-55,-64, 
  /* [3][0][][] */ 67,5,66,15,22,-31,47,75,-53,-24,42,-26,-64,58,-20,56,56,27,-31,24,-109,-55,127,-10,7,7,-62,-39,-42,78,112,-59,-5,-109,-17,55,-10,-74,-11,85,-57,-63,56,1,-91,-76,59,-7, 
  /* [4][0][][] */ 33,-25,88,-21,16,-13,-1,8,-65,-20,-25,4,61,-83,38,-100,61,49,-19,-34,10,40,32,6,-7,-2,78,-18,26,18,-127,-20,-27,-22,1,22,46,-8,38,-5,-49,-12,-77,32,-22,-103,9,13, 
  /* [5][0][][] */ 27,-39,62,24,32,14,30,1,-76,-6,-36,41,35,10,17,-41,93,74,-4,-14,79,-71,127,-80,-8,37,2,43,18,18,-26,-42,-26,-40,-34,16,40,35,60,6,-81,26,32,26,54,-17,75,0, 
  /* [6][0][][] */ -58,62,-127,96,49,35,37,26,-26,-12,69,-85,-104,-9,-18,26,-116,26,-28,102,27,34,-72,-87,-16,-24,42,84,-39,-54,-33,3,50,79,-53,-35,-19,-11,85,-10,63,69,-122,-60,-59,117,-52,-59, 
  /* [7][0][][] */ 16,63,-73,18,18,66,110,78,38,86,-96,-1,-40,-5,-44,-53,18,33,94,81,76,-5,127,26,110,93,-43,89,-62,8,10,-67,25,-63,-24,8,2,73,-71,91,-82,55,3,-73,62,-19,33,-44, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0039804480038583279, 0.0043201586231589317, 0.0062828492373228073, 0.0043873973190784454, 0.0052768676541745663, 0.0059412899427115917, 0.0032122328411787748, 0.0049815909005701542, } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { -740, 7659, 211, -962, 166, -1260, 818, 656, -3818, 552, -8054, -188, 189, -636, -2802, 4152, 5478, 1494, 124, -3660, -7022, -159, 15905, -3154, 1591, -1796, 6670, -7739, -757, 48, -7704, 7708, 2195, -564, 4332, 538, -20, -831, 13030, 935, 4874, -3410, 1543, 4286, -1937, 12708, 1448, 2138, };
const TfArray<48, float> quant28_scale = { 48, { 0.00043853363604284823, 0.00019017636077478528, 0.00087572407210245728, 0.00032086833380162716, 0.00032918399665504694, 0.00031548226252198219, 0.00027932279044762254, 0.00033289872226305306, 9.2204827524255961e-05, 0.0003730601747520268, 0.0001613861822988838, 0.0014462899416685104, 0.0005386822740547359, 0.00066617887932807207, 0.00043883695616386831, 0.00064286321867257357, 0.00021790739265270531, 7.8859200584702194e-05, 0.00031524407677352428, 0.00031457733712159097, 0.00021367991575971246, 0.00029386268579401076, 0.00010017576278187335, 0.00049405917525291443, 0.00024167478841263801, 0.00051148195052519441, 0.00052271439926698804, 0.00017729446699377149, 0.00023716794385109097, 0.00066724937641993165, 0.00013119885988999158, 0.00013082133955322206, 0.0001905357203213498, 0.00016990503354463726, 0.00014401727821677923, 0.0004684790619648993, 0.0045415656641125679, 0.00044510141015052795, 0.00011782815272454172, 0.00029984838329255581, 0.00028374127577990294, 0.00012206580140627921, 0.00039504346204921603, 0.00024781288811936975, 0.00033227753010578454, 6.4597661548759788e-05, 5.3238058171700686e-05, 0.00026791598065756261, } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 7,-30,3,12,-20,-99,-30,50,-40,-12,-25,16,41,-2,-12,7,93,6,37,6,2,-6,-79,24,-18,-13,-3,-16,-55,73,-16,-88,71,-1,-62,-61,-9,-27,-5,-4,-26,41,15,-11,-12,72,127,-29, -127,-82,-28,127,-71,87,-84,127,41,18,5,2,49,30,-4,-44,-34,63,24,5,26,127,13,127,123,-28,-44,44,71,-114,-12,-48,97,-3,-55,-127,22,21,-72,-56,-127,18,-98,-120,40,50,57,116, -1,8,6,9,-28,50,41,66,19,-33,12,10,-23,3,3,0,-56,29,-67,-39,3,-9,127,14,-60,10,3,9,9,45,7,4,16,-10,-37,66,8,9,7,59,13,-5,40,-20,-3,22,-35,-30, 
  /* [0][1][][] */ -16,-13,-33,4,34,-106,127,-91,-11,6,8,47,127,14,0,-29,-29,-34,33,57,59,-56,56,8,-79,127,-79,-12,127,-97,36,-127,-35,11,-82,17,9,-53,-51,22,105,127,22,-127,-63,-52,-11,74, 96,-127,127,4,127,78,-59,-81,37,127,127,-127,-90,127,127,127,127,127,112,127,127,99,5,-2,111,-91,-127,114,35,127,127,1,-127,127,127,120,-127,127,-127,-127,30,45,-127,-13,127,-127,-25,75, 37,28,-41,-4,-50,127,-113,86,101,-77,29,77,-38,2,16,-68,31,6,-127,7,27,-98,-53,-15,67,-7,-29,127,-72,-36,9,-39,-16,18,96,-31,36,-2,-7,-98,97,10,53,70,-52,102,118,-94, 
  /* [0][2][][] */ -10,35,1,-28,6,-81,-3,-6,3,-5,11,12,-12,-14,-1,1,-64,0,15,-42,-7,-33,92,-13,-127,9,35,-17,3,-10,-5,14,6,4,-72,30,1,-11,14,66,-20,-5,13,-6,-14,42,-13,5, 39,-12,-36,-34,29,22,114,-114,127,-39,24,17,-76,-21,-26,-66,-28,82,-5,25,-1,13,-33,-35,-90,62,66,-1,-97,12,-41,-17,-7,7,-42,-1,54,-19,5,103,-101,-5,-12,66,38,79,1,-127, 4,31,3,-22,-11,-22,-10,-53,-41,-28,19,13,19,-16,-9,9,58,33,-39,-29,-6,-24,-71,-20,15,-21,14,-1,-14,-4,-23,2,51,-8,-32,-55,-5,4,29,4,-5,-13,12,18,-11,33,80,-55, 
};
const TfArray<48, float> quant29_scale = { 48, { 0.018637679517269135, 0.0080824950709939003, 0.037218272686004639, 0.013636903837323189, 0.013990319333970547, 0.0134079959243536, 0.011871217750012875, 0.014148195274174213, 0.0039187050424516201, 0.015855057165026665, 0.0068589127622544765, 0.06146731972694397, 0.02289399690926075, 0.028312603011727333, 0.018650570884346962, 0.02732168510556221, 0.0092610642313957214, 0.0033515160903334618, 0.013397873379290104, 0.013369536958634853, 0.0090813962742686272, 0.012489164248108864, 0.004257469903677702, 0.020997514948248863, 0.010271178558468819, 0.021737983450293541, 0.022215362638235092, 0.0075350147671997547, 0.010079637169837952, 0.028358098119497299, 0.0055759516544640064, 0.005559906829148531, 0.0080977678298950195, 0.0072209639474749565, 0.006120733916759491, 0.019910359755158424, 0.19301654398441315, 0.018916809931397438, 0.0050076963379979134, 0.012743555940687656, 0.012059004046022892, 0.0051877964287996292, 0.016789346933364868, 0.010532047599554062, 0.014121795073151588, 0.0027454004157334566, 0.0022626174613833427, 0.011386428959667683, } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 2137, 2626, 9665, 907, 1774, -1233, 2274, 5748, 2100, -600, 2701, -1226, 8323, -1270, 1422, 8213, -39, 1401, 282, 2429, 2696, 2537, 452, 21581, 4707, 1948, 10870, 1097, 3048, 3460, 552, 554, 504, 938, -127, 184, -2016, -254, 1694, 2325, 3183, 1477, 2783, 3167, 2978, 1936, 1097, 5093, };
const TfArray<48, float> quant30_scale = { 48, { 0.00027979299193248153, 0.00030469521880149841, 0.0001062113224179484, 0.00031930871773511171, 0.00030373569461517036, 0.00031676681828685105, 0.00032710679806768894, 0.00015608465764671564, 0.00028888013912364841, 0.00031001909519545734, 0.00029263869510032237, 0.00041031782166101038, 0.00011553308286238462, 0.00030903532751835883, 0.0003904011391568929, 0.0001166787842521444, 0.0005350715946406126, 0.0003324785502627492, 0.00034207309363409877, 0.0002745242090895772, 0.00026281966711394489, 0.00028401197050698102, 0.00053252349607646465, 5.3192881750874221e-05, 0.00018813973292708397, 0.00030365848215296865, 9.2810892965644598e-05, 0.00035879373899661005, 0.00024846452288329601, 0.00022032784181647003, 0.00060799275524914265, 0.0006859211134724319, 0.00041806619265116751, 0.00035535203642211854, 0.00038036194746382535, 0.00041077277273871005, 0.0002952053037006408, 0.00039889110485091805, 0.00033773144241422415, 0.00025186140555888414, 0.00024465983733534813, 0.00032757490407675505, 0.00029009176068939269, 0.0002743575896602124, 0.00024442639551125467, 0.00036873886710964143, 0.00057287426898255944, 0.00016237125964835286, } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 41,127,-80,-105,10,90,28,67, 
  /* [1][0][][] */ 60,-76,53,-127,-64,72,-87,-40, 
  /* [2][0][][] */ -38,124,127,52,104,-5,53,25, 
  /* [3][0][][] */ 96,57,-88,52,15,-99,-127,-13, 
  /* [4][0][][] */ -65,48,32,-86,-35,119,127,67, 
  /* [5][0][][] */ 41,100,-127,-101,43,102,43,-21, 
  /* [6][0][][] */ 11,127,52,70,75,17,6,-78, 
  /* [7][0][][] */ 127,-19,-17,37,9,4,62,1, 
  /* [8][0][][] */ 56,127,54,77,111,59,73,-73, 
  /* [9][0][][] */ 33,114,-127,-78,21,105,-4,81, 
  /* [10][0][][] */ -66,-43,27,-32,2,-25,-53,127, 
  /* [11][0][][] */ 22,-92,-127,-16,12,-3,39,-13, 
  /* [12][0][][] */ -8,-88,-127,-38,-86,30,-36,30, 
  /* [13][0][][] */ -9,9,-96,95,-127,-23,4,-18, 
  /* [14][0][][] */ -64,-39,-127,-2,33,0,-16,-53, 
  /* [15][0][][] */ 30,-107,-127,17,-110,-22,-12,-32, 
  /* [16][0][][] */ 127,-69,-26,51,-74,17,28,97, 
  /* [17][0][][] */ -27,127,125,-50,-44,-21,-40,-11, 
  /* [18][0][][] */ 3,-127,50,62,7,-84,48,-90, 
  /* [19][0][][] */ 127,-36,-68,45,-105,18,49,109, 
  /* [20][0][][] */ -33,-127,69,64,-12,-93,1,-75, 
  /* [21][0][][] */ -9,-44,-19,-45,127,-6,51,41, 
  /* [22][0][][] */ -127,21,-87,42,56,50,-97,-124, 
  /* [23][0][][] */ -89,-58,63,-14,-96,119,127,-55, 
  /* [24][0][][] */ -26,65,-11,-69,-43,127,116,5, 
  /* [25][0][][] */ -52,-97,-127,-60,-36,-24,-16,-43, 
  /* [26][0][][] */ -8,53,-20,127,-111,32,-56,-19, 
  /* [27][0][][] */ 8,-127,21,67,14,-61,13,-115, 
  /* [28][0][][] */ 9,127,74,70,125,-7,16,-77, 
  /* [29][0][][] */ 110,13,-37,-9,65,-126,-127,39, 
  /* [30][0][][] */ 25,-2,36,-127,21,-21,19,-28, 
  /* [31][0][][] */ 39,-27,2,49,-9,34,18,127, 
  /* [32][0][][] */ -74,-61,17,-65,-76,127,54,92, 
  /* [33][0][][] */ -19,52,38,-35,42,127,-104,72, 
  /* [34][0][][] */ 37,127,-79,-62,28,42,-65,73, 
  /* [35][0][][] */ -6,-127,50,62,-27,-66,47,-66, 
  /* [36][0][][] */ -13,-31,-86,-7,-127,-49,-13,7, 
  /* [37][0][][] */ -42,-127,62,81,-37,-107,-9,-32, 
  /* [38][0][][] */ -72,26,61,-74,-127,-87,-59,81, 
  /* [39][0][][] */ 90,-127,80,85,-19,-111,-42,-103, 
  /* [40][0][][] */ 5,47,17,46,-127,-33,-71,-4, 
  /* [41][0][][] */ 102,118,-83,-127,53,16,3,24, 
  /* [42][0][][] */ -12,-46,-16,18,127,9,49,14, 
  /* [43][0][][] */ 127,25,72,12,-73,-24,68,105, 
  /* [44][0][][] */ 71,42,-8,33,89,-126,-127,27, 
  /* [45][0][][] */ 35,12,16,21,79,-127,-5,-50, 
  /* [46][0][][] */ 51,-28,-2,127,41,56,14,78, 
  /* [47][0][][] */ -107,-117,59,127,-34,16,124,-88, 
};
const TfArray<48, float> quant31_scale = { 48, { 0.0026617744006216526, 0.0028986786492168903, 0.0010104277171194553, 0.0030377022922039032, 0.0028895502910017967, 0.0030135202687233686, 0.0031118881888687611, 0.001484891283325851, 0.0027482239529490471, 0.0029493267647922039, 0.0027839804533869028, 0.0039035056252032518, 0.001099109067581594, 0.0029399676714092493, 0.0037140308413654566, 0.0011100085685029626, 0.005090334452688694, 0.0031629917211830616, 0.0032542680855840445, 0.0026116506196558475, 0.00250030099414289, 0.0027019111439585686, 0.005066093523055315, 0.00050604360876604915, 0.0017898430814966559, 0.0028888157103210688, 0.00088294444140046835, 0.0034133379813283682, 0.0023637351114302874, 0.0020960604306310415, 0.0057840603403747082, 0.0065254219807684422, 0.0039772186428308487, 0.0033805957064032555, 0.0036185241769999266, 0.0039078337140381336, 0.0028083974029868841, 0.003794799093157053, 0.0032129643950611353, 0.0023960510734468699, 0.0023275397252291441, 0.0031163415405899286, 0.0027597504667937756, 0.002610065508633852, 0.0023253189865499735, 0.0035079496446996927, 0.0054499655961990356, 0.0015446980250999331, } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { 7360, 14878, -5415, 7940, -1900, 2590, -12491, -15606, };
const TfArray<8, float> quant32_scale = { 8, { 0.00025189746520482004, 0.00011316003656247631, 0.00016110030992422253, 0.00013494851009454578, 0.00020325565128587186, 0.00013854233839083463, 0.00020559283439069986, 0.0001318855065619573, } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -43,-5,33,12,-34,-13,10,9,-44,-11,-60,-52,-27,-59,-11,-29,45,-40,38,39,-17,31,-42,13,3,-35,49,-17,-6,-25,15,8,77,32,31,-127,15,2,-18,-31,3,-17,38,43,34,4,27,5, 
  /* [1][0][][] */ -2,39,60,-23,3,50,-46,-40,9,27,-17,-87,8,94,-17,53,-33,24,-10,-48,8,-77,-22,22,-71,-7,-1,-111,-16,-15,33,-53,43,76,-32,-2,127,-39,1,55,-39,53,-86,-29,120,-14,-40,-23, 
  /* [2][0][][] */ -10,-23,-65,15,1,46,24,3,-10,45,-4,26,70,-94,15,-64,34,-85,29,36,-22,55,5,19,-14,64,-21,-69,19,4,17,-68,-47,-91,37,-24,103,13,-5,-55,3,34,85,29,127,14,16,25, 
  /* [3][0][][] */ -10,21,-65,42,21,-34,-73,-102,10,-24,-36,2,2,22,28,77,-7,18,-43,22,4,-97,22,-53,-74,-7,127,-10,-49,5,-65,21,0,-77,11,-15,-26,-37,-24,98,-48,-28,0,11,34,1,-40,47, 
  /* [4][0][][] */ -27,-52,-10,8,33,-30,-10,-8,33,-31,66,-81,8,31,12,5,-14,-22,12,-16,-1,-47,5,-19,15,-10,45,47,35,19,-15,28,-9,-9,1,2,-67,85,38,-25,31,-21,-14,-19,-79,16,127,11, 
  /* [5][0][][] */ 46,-28,3,22,32,-38,38,-127,33,-24,-11,123,-82,75,23,-73,4,-93,17,1,-36,70,-35,-51,-61,76,-31,2,-16,48,-44,-39,27,57,36,-7,-37,-9,-44,-40,23,-36,-53,-3,-30,57,95,24, 
  /* [6][0][][] */ 53,-25,23,-9,-36,-19,-36,18,-39,8,-36,127,-41,-35,-5,54,10,41,16,31,43,-81,-19,21,17,38,-65,6,10,-41,19,41,9,12,-14,3,14,2,0,-2,-9,-19,40,62,-2,-33,71,-15, 
  /* [7][0][][] */ -16,-7,2,59,20,34,4,27,19,7,70,-2,111,108,53,44,46,34,-9,-6,21,-18,-90,-20,9,2,-32,57,34,-29,-28,-17,37,8,35,-88,-69,36,39,51,-24,24,74,127,-52,-22,-100,60, 
};
const TfArray<8, float> quant33_scale = { 8, { 0.010705642402172089, 0.004809301346540451, 0.0068467631936073303, 0.0057353116571903229, 0.0086383651942014694, 0.005888049490749836, 0.0087376954033970833, 0.0056051341816782951, } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 12370, 5547, 4817, -229, 918, -87, -199, 35763, -1156, -993, 6562, 67086, 1817, 6113, 161, 9509, -1128, 12395, 1823, 6676, 13719, 946, 5408, -12128, 19333, 2844, 1780, 17323, -1263, -380, -9812, 12082, 3911, 1491, -305, 6349, -10966, 9897, -4245, 14551, -3274, -743, 9264, 4312, 876, -2187, 4489, -392, };
const TfArray<48, float> quant34_scale = { 48, { 7.983304385561496e-05, 7.4452451372053474e-05, 0.00013943527301307768, 0.00021386583102867007, 0.0009585781954228878, 0.00023184988822322339, 0.00013293081428855658, 7.1026384830474854e-05, 0.00015309285663533956, 0.00011909442400792614, 7.828902016626671e-05, 4.6337150706676766e-05, 8.1384088844060898e-05, 5.7983437727671117e-05, 0.00035355123691260815, 0.00021312947501428425, 0.00012059663276886567, 0.00030378240626305342, 0.00011504330177558586, 0.00012958722072653472, 9.6743366157170385e-05, 0.00050129805458709598, 9.6156196377705783e-05, 0.00013297164696268737, 6.2121675000526011e-05, 6.9088557211216539e-05, 5.4802298109279945e-05, 5.9609439631458372e-05, 0.00025100231869146228, 0.001242568832822144, 0.00018295356130693108, 7.9723758972249925e-05, 8.8274951849598438e-05, 0.00016310524370055646, 0.00018934134277515113, 6.0764432419091463e-05, 6.0895272326888517e-05, 5.0045327952830121e-05, 0.00013282688450999558, 8.1987171142827719e-05, 0.00011473986523924395, 0.00021419442782644182, 5.804546526633203e-05, 7.3026574682444334e-05, 6.5370099036954343e-05, 0.00041713032987900078, 6.5197011281270534e-05, 0.00025119853671640158, } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -46,-93,-21,-23,127,-66,77,-67,-90,-85,-20,-16,120,32,60,-127,51,-13,-10,-37,-98,97,-31,20,-34,109,79,-31,84,-76,17,-50,-84,-76,32,78,12,82,126,-54,-127,-23,43,62,66,-118,74,68, -58,-127,-75,47,-76,106,71,-70,-70,52,67,-114,127,97,104,-81,-84,-68,27,-46,-96,99,-82,127,-96,127,83,-113,99,-50,13,-116,-36,-85,74,127,112,115,127,-56,-126,-77,84,88,103,127,77,63, -3,-50,-62,89,-45,-29,30,-19,108,33,63,-91,14,58,-39,-19,-86,-21,31,-26,-30,-16,-112,11,-61,68,12,-101,37,55,127,-72,23,18,-14,69,95,63,58,5,-10,94,46,26,65,43,8,-127, 
  /* [0][1][][] */ -112,-109,-28,-65,-82,-80,100,-97,-127,-127,79,-56,100,45,-127,-73,127,-127,-62,-62,-73,127,-70,14,-27,96,127,-53,-100,-82,4,-56,-115,-127,-127,59,36,88,28,-87,76,-12,74,122,79,116,125,-107, -127,-117,-127,-96,-29,127,127,-127,97,77,127,-127,103,127,53,-114,64,-84,-127,-127,-127,101,-127,123,-127,121,122,-127,-127,127,-12,-127,-127,-97,59,104,127,127,13,-127,112,-102,127,127,127,10,127,119, -55,-66,-124,127,68,-52,39,-36,85,45,30,-61,11,73,54,-55,-20,-8,-17,-51,-72,10,-61,-4,-92,42,20,-112,-54,35,124,-88,-61,11,66,65,99,79,2,-34,62,127,62,21,64,-46,29,21, 
  /* [0][2][][] */ -127,-37,7,5,-49,-30,24,-34,25,-41,14,-65,24,14,-49,-9,-88,-26,99,-41,-38,50,-122,-6,-21,67,102,-16,44,59,-6,-1,0,-70,-50,32,13,21,-42,-28,27,0,38,32,21,53,15,-75, -81,-40,-38,-74,89,39,57,-43,92,38,-38,-119,15,32,-122,-75,37,10,48,-65,-54,19,-78,62,-76,77,74,-50,44,7,-27,-41,-75,-32,-66,41,24,24,-87,-53,33,-42,85,59,44,-110,25,-5, -24,-48,-50,-23,-26,-19,5,-16,-71,34,-16,-45,-3,19,18,-30,24,27,-10,-55,-53,25,-27,-15,-34,21,12,-43,7,-67,54,-23,-105,18,16,40,30,20,-32,-22,5,55,15,12,35,-2,1,38, 
};
const TfArray<48, float> quant35_scale = { 48, { 0.0033929042983800173, 0.0031642289832234383, 0.0059259990230202675, 0.0090892976149916649, 0.040739573538303375, 0.0098536200821399689, 0.0056495591998100281, 0.0030186213552951813, 0.0065064462833106518, 0.0050615128129720688, 0.0033272833097726107, 0.0019693288486450911, 0.0034588237758725882, 0.0024642960634082556, 0.015025927685201168, 0.009058002382516861, 0.0051253568381071091, 0.012910752557218075, 0.0048893401399254799, 0.0055074570700526237, 0.0041115931235253811, 0.02130516804754734, 0.0040866383351385593, 0.005651294719427824, 0.0026401712093502283, 0.0029362635686993599, 0.0023290975950658321, 0.0025334011297672987, 0.010667597874999046, 0.052809175103902817, 0.0077755260281264782, 0.0033882595598697662, 0.0037516853772103786, 0.0069319726899266243, 0.0080470070242881775, 0.0025824883487075567, 0.0025880490429699421, 0.0021269263233989477, 0.0056451424024999142, 0.0034844547044485807, 0.0048764441162347794, 0.009103262796998024, 0.0024669321719557047, 0.0031036294531077147, 0.0027782290708273649, 0.017728038132190704, 0.0027708727866411209, 0.010675937868654728, } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 644, -275, -220, 622, 6397, 1105, -267, 2744, 621, 577, 42, 3365, 588, 341, -695, 322, 2513, 6325, 2459, -474, 624, -979, 4, 1479, -145, -503, 1032, -3, 2025, 14454, 1284, 13, 260, -60, 1870, 18, 361, -134, 457, 769, 1097, 1231, 72, -116, 427, 1262, 743, -78, };
const TfArray<48, float> quant36_scale = { 48, { 0.00081501773092895746, 0.00062348693609237671, 0.00049212010344490409, 0.00070658436743542552, 0.00015180495392996818, 0.00057372462470084429, 0.00083193200407549739, 0.00032128795282915235, 0.00062629580497741699, 0.0011431138264015317, 0.00077299372060224414, 0.00028483386267907917, 0.00044304758193902671, 0.00066285947104915977, 0.00047218197141773999, 0.00045475122169591486, 0.00031416231649927795, 0.00014218858268577605, 0.00029265537159517407, 0.00065798708237707615, 0.00076898786937817931, 0.00027407001471146941, 0.0010355372214689851, 0.00050326721975579858, 0.00079839321551844478, 0.0010571768507361412, 0.00056833494454622269, 0.0014491650508716702, 0.0004307623312342912, 7.2614267992321402e-05, 0.00055133021669462323, 0.0012409372720867395, 0.00073250464629381895, 0.00065188034204766154, 0.00040273676859214902, 0.00065780954901129007, 0.00062328268541023135, 0.0010624456917867064, 0.00089294713689014316, 0.00077402603346854448, 0.00051779713248834014, 0.00053729966748505831, 0.00063168146880343556, 0.0010242959251627326, 0.00071721087442710996, 0.0003771549672819674, 0.00041921192314475775, 0.00082438404206186533, } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -36,35,1,-19,-74,-31,-127,27, 
  /* [1][0][][] */ 89,-96,-62,-58,127,-97,108,26, 
  /* [2][0][][] */ -95,113,-49,-127,52,-25,-29,35, 
  /* [3][0][][] */ 54,19,108,1,84,100,127,-3, 
  /* [4][0][][] */ -68,-111,69,-19,-60,-127,6,-33, 
  /* [5][0][][] */ 127,-14,57,63,-63,-12,0,-17, 
  /* [6][0][][] */ 30,34,127,-22,42,-34,-42,25, 
  /* [7][0][][] */ 29,7,-127,-37,-39,95,93,-80, 
  /* [8][0][][] */ -6,127,-38,10,68,113,46,75, 
  /* [9][0][][] */ -6,103,-62,88,2,-109,50,127, 
  /* [10][0][][] */ -8,-111,0,-32,-74,-127,-52,-74, 
  /* [11][0][][] */ -127,-84,104,47,-15,-76,101,56, 
  /* [12][0][][] */ -30,52,-127,84,43,-62,-64,107, 
  /* [13][0][][] */ 94,-127,103,85,11,34,46,-56, 
  /* [14][0][][] */ -18,74,-36,-127,-22,-121,-25,-63, 
  /* [15][0][][] */ 43,121,35,-13,36,-72,100,-127, 
  /* [16][0][][] */ -101,-127,-49,112,-63,24,-3,64, 
  /* [17][0][][] */ -24,-110,-127,87,-63,69,-55,78, 
  /* [18][0][][] */ -120,-92,-50,111,-24,85,-12,127, 
  /* [19][0][][] */ 58,-126,92,-127,15,-56,25,-31, 
  /* [20][0][][] */ -9,90,37,16,47,127,79,-7, 
  /* [21][0][][] */ 30,116,45,-27,42,-74,89,-127, 
  /* [22][0][][] */ 32,13,101,10,-9,127,31,-46, 
  /* [23][0][][] */ -87,-65,19,-68,90,98,-58,-127, 
  /* [24][0][][] */ -90,-83,36,-82,99,91,-44,-127, 
  /* [25][0][][] */ 127,18,-59,-16,21,33,-67,-7, 
  /* [26][0][][] */ -127,-39,-122,-29,-57,-33,21,-5, 
  /* [27][0][][] */ 79,33,0,-54,-127,-27,81,88, 
  /* [28][0][][] */ -127,-88,4,32,-66,-122,2,6, 
  /* [29][0][][] */ 127,70,54,-94,15,6,-50,-83, 
  /* [30][0][][] */ -88,-68,30,-68,73,95,-40,-127, 
  /* [31][0][][] */ 54,43,-3,127,6,-70,6,7, 
  /* [32][0][][] */ -33,127,-10,35,26,68,-13,50, 
  /* [33][0][][] */ -42,127,-84,13,25,-40,-27,-1, 
  /* [34][0][][] */ -104,-127,-42,116,-19,6,39,92, 
  /* [35][0][][] */ -56,127,-34,-9,73,113,63,69, 
  /* [36][0][][] */ 66,17,-4,-37,-127,-21,86,100, 
  /* [37][0][][] */ -68,119,27,21,-127,108,-21,-100, 
  /* [38][0][][] */ 35,50,39,18,127,76,113,50, 
  /* [39][0][][] */ -24,-65,39,-11,2,28,-86,127, 
  /* [40][0][][] */ -56,-69,-72,127,-22,-4,11,73, 
  /* [41][0][][] */ 127,-3,57,83,-48,-8,2,-16, 
  /* [42][0][][] */ -42,12,-69,-127,58,-105,12,89, 
  /* [43][0][][] */ 24,-7,88,0,35,127,93,7, 
  /* [44][0][][] */ -26,-30,-69,127,44,10,-37,-42, 
  /* [45][0][][] */ 83,104,103,-99,52,-48,24,-127, 
  /* [46][0][][] */ -34,-127,-40,31,-5,37,-67,127, 
  /* [47][0][][] */ 29,24,115,2,72,110,127,-17, 
};
const TfArray<48, float> quant37_scale = { 48, { 0.0049580601043999195, 0.003792906180024147, 0.0029937520157545805, 0.0042984192259609699, 0.00092348677571862936, 0.0034901832696050406, 0.0050609558820724487, 0.0019545156974345446, 0.0038099936209619045, 0.0069539919495582581, 0.0047024120576679707, 0.001732751727104187, 0.0026952254120260477, 0.0040324241854250431, 0.00287246098741889, 0.0027664231602102518, 0.0019111678702756763, 0.00086498673772439361, 0.0017803329974412918, 0.0040027834475040436, 0.004678043071180582, 0.0016672711353749037, 0.006299563217908144, 0.0030615641735494137, 0.0048569268546998501, 0.0064312051981687546, 0.0034573955927044153, 0.0088158175349235535, 0.0026204895693808794, 0.00044173997594043612, 0.003353949636220932, 0.0075490893796086311, 0.0044561019167304039, 0.0039656339213252068, 0.002449999563395977, 0.0040017035789787769, 0.0037916635628789663, 0.0064632575958967209, 0.0054321340285241604, 0.0047086919657886028, 0.0031499553006142378, 0.0032685962505638599, 0.0038427563849836588, 0.0062311780638992786, 0.0043630641885101795, 0.0022943757940083742, 0.0025502240750938654, 0.0050150388851761818, } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { -7785, -3457, 11420, -9678, 19382, 7375, -8933, 11641, };
const TfArray<8, float> quant38_scale = { 8, { 0.00020868392311967909, 0.00032833361183293164, 0.00021854028454981744, 0.00030620562029071152, 0.00027452665381133556, 0.00019347909255884588, 0.00022464625362772495, 0.00032891216687858105, } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -6,-18,-13,-65,-25,-32,18,-25,39,13,-28,-9,107,127,-18,-105, 
  /* [1][0][][] */ 127,-56,-41,16,-46,72,-65,-46,-36,82,-31,-51,-9,6,-60,-18, 
  /* [2][0][][] */ -35,-101,44,38,48,-59,-83,-18,36,-87,28,-127,49,-23,-77,23, 
  /* [3][0][][] */ 34,13,12,15,-12,67,-56,-20,127,43,8,21,7,-16,13,21, 
  /* [4][0][][] */ -79,-32,-27,-127,-2,32,52,-115,31,-17,-42,-37,-109,33,-42,-16, 
  /* [5][0][][] */ 85,51,68,-22,47,-49,-127,-115,-18,-73,54,47,-56,47,61,-39, 
  /* [6][0][][] */ 97,41,-127,-69,27,-72,4,-77,-35,16,-115,89,91,-88,10,69, 
  /* [7][0][][] */ -127,-1,98,-26,-61,2,-2,-63,-51,57,85,-26,65,-31,29,31, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0088690668344497681, 0.013954178430140018, 0.0092879617586731911, 0.013013739138841629, 0.011667381972074509, 0.0082228612154722214, 0.009547465480864048, 0.013978767208755016, } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { 10356, -959, 405, 2296, -441, 80, 7684, 783, -2642, 306, -2448, 1957, -3893, -775, -236, -1178, };
const TfArray<16, float> quant40_scale = { 16, { 0.00022680804249830544, 0.00038553902413696051, 0.00017282717453781515, 0.00018285823171027005, 0.0013680469710379839, 0.0011626516934484243, 0.00018246329273097217, 0.0012606846867129207, 0.00061788957100361586, 0.0016136771300807595, 0.00053855276200920343, 0.00034759918344207108, 0.00013367750216275454, 0.0003725251299329102, 0.00038859708001837134, 0.00054666853975504637, } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 4,-3,13,7,-19,11,11,16,1,-12,-2,-6,-9,-6,4,-1, 8,-5,9,4,14,-2,19,-26,-2,8,-9,90,-7,21,10,0, 3,1,0,2,1,-13,4,11,3,2,-10,-6,14,-4,-1,0, 
  /* [0][1][][] */ 13,-9,-2,4,127,-24,-127,-21,127,127,-1,-8,102,-24,-9,-19, -127,127,127,-1,-89,-90,-8,-102,20,-107,127,127,127,127,127,127, 20,-1,-6,0,-12,127,12,-9,-3,-13,-9,-2,22,-5,-21,-9, 
  /* [0][2][][] */ 2,-2,0,-14,-20,16,59,7,-13,-9,2,-12,-14,0,-6,-12, 22,-13,-4,-127,5,-15,-5,127,-5,0,4,-24,-15,-60,-15,-36, 3,-4,1,-4,-2,-4,5,-1,-2,2,-3,-5,9,-7,-11,-12, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0096393413841724396, 0.016385408118367195, 0.007345154881477356, 0.0077714747749269009, 0.058141995221376419, 0.049412693828344345, 0.0077546900138258934, 0.053579095751047134, 0.026260307058691978, 0.068581275641918182, 0.022888492792844772, 0.014772964641451836, 0.0056812935508787632, 0.015832317993044853, 0.016515376046299934, 0.023233411833643913, } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&g0::quant8_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { 2085, -598, 689, -511, 49160, 32253, 2518, -1028, 4409, 380, 755, -100, 2084, -26557, -277, 49952, };
const TfArray<16, float> quant42_scale = { 16, { 0.00035616676905192435, 0.0020295844879001379, 0.00030299805803224444, 0.00024820351973176003, 3.5143202694598585e-05, 5.7742920034797862e-05, 0.00022583633835893124, 3.7216319469735026e-05, 0.00019351682567503303, 4.2050982301589102e-05, 0.00073217629687860608, 0.0018905483884736896, 0.00095258251531049609, 1.9344002794241533e-05, 0.0016993285389617085, 4.2991305235773325e-05, } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -87, -111, -31, 
  /* [0][1][][] */ 66, -38, 15, 
  /* [0][2][][] */ 31, 127, 18, 
  /* [1][0][][] */ 106, -95, -10, 
  /* [1][1][][] */ -127, 105, 24, 
  /* [1][2][][] */ 14, -1, -12, 
  /* [2][0][][] */ -24, -3, -49, 
  /* [2][1][][] */ 35, 95, 127, 
  /* [2][2][][] */ -13, -95, -80, 
  /* [3][0][][] */ 121, 127, 59, 
  /* [3][1][][] */ 3, -21, -14, 
  /* [3][2][][] */ -100, -126, -43, 
  /* [4][0][][] */ 29, -58, 6, 
  /* [4][1][][] */ 30, -127, 10, 
  /* [4][2][][] */ 19, -85, 0, 
  /* [5][0][][] */ -66, 34, 8, 
  /* [5][1][][] */ -127, 40, 13, 
  /* [5][2][][] */ -76, 35, 10, 
  /* [6][0][][] */ -17, 79, 127, 
  /* [6][1][][] */ -50, 56, -16, 
  /* [6][2][][] */ -36, -51, -88, 
  /* [7][0][][] */ 31, 15, -25, 
  /* [7][1][][] */ 127, 66, -10, 
  /* [7][2][][] */ 34, 5, -23, 
  /* [8][0][][] */ -20, -30, 53, 
  /* [8][1][][] */ -53, -86, 127, 
  /* [8][2][][] */ -26, -60, 96, 
  /* [9][0][][] */ -16, 57, -15, 
  /* [9][1][][] */ -13, 127, -18, 
  /* [9][2][][] */ -6, 87, -13, 
  /* [10][0][][] */ 25, 88, 12, 
  /* [10][1][][] */ -37, -127, -29, 
  /* [10][2][][] */ 12, 40, 18, 
  /* [11][0][][] */ 7, -19, 9, 
  /* [11][1][][] */ 65, -93, 35, 
  /* [11][2][][] */ -85, 127, -46, 
  /* [12][0][][] */ -41, 49, -10, 
  /* [12][1][][] */ -127, 114, 6, 
  /* [12][2][][] */ -79, 79, 5, 
  /* [13][0][][] */ 84, 25, 7, 
  /* [13][1][][] */ 127, 101, 6, 
  /* [13][2][][] */ 76, 105, 50, 
  /* [14][0][][] */ -30, -27, 48, 
  /* [14][1][][] */ 45, 99, -127, 
  /* [14][2][][] */ -16, -70, 81, 
  /* [15][0][][] */ -98, -41, 1, 
  /* [15][1][][] */ -126, -127, 0, 
  /* [15][2][][] */ -11, -62, -2, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.090822517871856689, 0.51754403114318848, 0.077264502644538879, 0.063291892409324646, 0.0089615164324641228, 0.014724443666636944, 0.057588264346122742, 0.0094901612028479576, 0.049346785992383957, 0.010722999460995197, 0.18670494854450226, 0.4820898175239563, 0.24290852248668671, 0.0049327202141284943, 0.43332874774932861, 0.010962782427668571, } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.16438238322734833, } };
const TfArray<1, int> quant46_zero = { 1, { 20 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.10511521250009537, } };
const TfArray<1, int> quant50_zero = { 1, { -21 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<1, float> quant53_scale = { 1, { 0.094489961862564087, } };
const TfArray<1, int> quant53_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<1, float> quant54_scale = { 1, { 0.12145611643791199, } };
const TfArray<1, int> quant54_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.06998850405216217, } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&g0::quant53_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant61_scale = { 1, { 0.069119125604629517, } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&g0::quant50_zero, 0 };
const TfArray<1, float> quant62_scale = { 1, { 0.085184983909130096, } };
const TfArray<1, int> quant62_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<1, float> quant65_scale = { 1, { 0.05731656402349472, } };
const TfArray<1, int> quant65_zero = { 1, { 10 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<1, float> quant66_scale = { 1, { 0.10054714977741241, } };
const TfArray<1, int> quant66_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.052475869655609131, } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant69_scale = { 1, { 0.18113654851913452, } };
const TfArray<1, int> quant69_zero = { 1, { -25 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 432), (TfLiteIntArray*)&g0::tensor_dimension69, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension69, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
